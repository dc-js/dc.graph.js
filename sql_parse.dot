digraph sql_parse_tree{
_replace_stmt [label="replace_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td>replace</td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr></table><p>Comment:REPLACE</p></body> </html>", tooltip="REPLACE"];
_named_parameter [label="named_parameter", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>class</td><td>string</td><td></td><td>named_parameter</td><tr><tr><td>param</td><td>string</td><td></td><td></td><tr></table><p>Comment:jdbc named parameter</p></body> </html>", tooltip="jdbc named parameter"];
_delete_stmt [label="delete_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td>delete</td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr></table><p>Comment:DROP</p></body> </html>", tooltip="DROP"];
_create_index_stmt [label="create_index_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td>create_index</td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr></table><p>Comment:CREATE INDEX</p></body> </html>", tooltip="CREATE INDEX"];
_execute_stmt [label="execute_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td>execute</td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr></table><p>Comment:EXECUTE`</p></body> </html>", tooltip="EXECUTE`"];
_subquery_summary_expression [label="subquery_summary_expression", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>subquery</td><td>select_body</td><td></td><td></td><tr><tr><td>type</td><td>string</td><td></td><td>all,any,exists</td><tr><tr><td>class</td><td>string</td><td></td><td>subquery_summary</td><tr></table><p>Comment:a scalar expression arithmatic operation</p></body> </html>", tooltip="a scalar expression arithmatic operation"];
_field_def [label="field_def", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>options</td><td>string</td><td>array</td><td></td><tr><tr><td>type</td><td>col_data_type</td><td></td><td></td><tr><tr><td>name</td><td>string</td><td></td><td></td><tr></table><p>Comment:a column description in the DDL</p></body> </html>", tooltip="a column description in the DDL"];
_commit_stmt [label="commit_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td>commit</td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr></table><p>Comment:COMMIT`</p></body> </html>", tooltip="COMMIT`"];
_col_data_type [label="col_data_type", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td></td><tr><tr><td>char_set</td><td>string</td><td></td><td></td><tr><tr><td>args</td><td>string</td><td>array</td><td></td><tr></table><p>Comment:data type type description of a column</p></body> </html>", tooltip="data type type description of a column"];
_all_columns [label="all_columns", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td>free</td><tr><tr><td>class</td><td>string</td><td></td><td>star</td><tr></table><p>Comment:the * in a SELECT *</p></body> </html>", tooltip="the * in a SELECT *"];
_interval_expression [label="interval_expression", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>interval</td><tr><tr><td>param</td><td>string</td><td></td><td></td><tr></table><p>Comment:an interval expression</p></body> </html>", tooltip="an interval expression"];
_subselect [label="subselect", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>body</td><td>select_body</td><td></td><td></td><tr><tr><td>alias</td><td>string</td><td></td><td></td><tr><tr><td>with</td><td>with_item</td><td>array</td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>subselect</td><tr></table><p>Comment:a subselection expression</p></body> </html>", tooltip="a subselection expression"];
_drop_stmt [label="drop_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>if_exists</td><td>boolean</td><td></td><td></td><tr><tr><td>object</td><td>string</td><td></td><td></td><tr><tr><td>params</td><td>string</td><td>array</td><td></td><tr><tr><td>table</td><td>table_ref</td><td></td><td></td><tr><tr><td>type</td><td>string</td><td></td><td>drop</td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr></table><p>Comment:DROP</p></body> </html>", tooltip="DROP"];
_case_expression [label="case_expression", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>operands</td><td>when_then</td><td>array</td><td></td><tr><tr><td>else</td><td>expression</td><td></td><td></td><tr><tr><td>switch</td><td>predicate</td><td></td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>case_exp</td><tr></table><p>Comment:a scalar predicate expression.  Between operands: [left, start, end]. IN operands: [lhs, in_list] if lhs_type=expression</p></body> </html>", tooltip="a scalar predicate expression.  Between operands: [left, start, end]. IN operands: [lhs, in_list] if lhs_type=expression"];
_literal [label="literal", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><h1>Header 1</h1><h2>Header 2</h2><h3>Header 3</h3><h4>Header 4</h4><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td>datetimevalue,<wbr>datevalue,<wbr>double,<wbr>hex,<wbr>long,<wbr>string,<wbr>timekey,<wbr>timestampvalue,<wbr>timevalue</td><tr><tr><td>class</td><td>string</td><td></td><td>literal</td><tr><tr><td>value</td><td>string</td><td></td><td></td><tr></table><p>Comment:a literal</p></body> </html>", tooltip="a literal"];
_select_stmt [label="select_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>with</td><td>with_item</td><td>array</td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr><tr><td>type</td><td>string</td><td></td><td>select</td><tr><tr><td>payload</td><td>select_body</td><td></td><td></td><tr></table><p>Comment:SELECT .....</p></body> </html>", tooltip="SELECT ....."];
_create_table_stmt [label="create_table_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>definition</td><td>string</td><td></td><td>select,columns</td><tr><tr><td>options</td><td>string</td><td>array</td><td></td><tr><tr><td>unlogged</td><td>boolean</td><td></td><td></td><tr><tr><td>payload</td><td>field_def</td><td>array</td><td></td><tr><tr><td>ifnotexists</td><td>boolean</td><td></td><td></td><tr><tr><td>table</td><td>table_ref</td><td></td><td></td><tr><tr><td>type</td><td>string</td><td></td><td>create_table</td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr><tr><td>select</td><td>select_body</td><td></td><td></td><tr></table><p>Comment:CREATE TABLE</p></body> </html>", tooltip="CREATE TABLE"];
_values_list [label="values_list", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>alias</td><td>string</td><td></td><td></td><tr><tr><td>expressions</td><td>expression_list</td><td>array</td><td></td><tr><tr><td>column_names</td><td>string</td><td>array</td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>values_list</td><tr></table></body> </html>"];
_with_item [label="with_item", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>recursive</td><td>boolean</td><td></td><td></td><tr><tr><td>items</td><td>select_item</td><td>array</td><td></td><tr><tr><td>name</td><td>string</td><td></td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>with_item</td><tr><tr><td>select</td><td>select_item</td><td></td><td></td><tr></table><p>Comment:a WITH expression</p></body> </html>", tooltip="a WITH expression"];
_parameter [label="parameter", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td>jdbc,user</td><tr><tr><td>class</td><td>string</td><td></td><td>named_parameter</td><tr></table><p>Comment:jdbc  parameter</p></body> </html>", tooltip="jdbc  parameter"];
_create_view_stmt [label="create_view_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>materialized</td><td>boolean</td><td></td><td></td><tr><tr><td>is_replace</td><td>boolean</td><td></td><td></td><tr><tr><td>or_replace</td><td>boolean</td><td></td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr><tr><td>table</td><td>table_ref</td><td></td><td></td><tr><tr><td>type</td><td>string</td><td></td><td>create_view</td><tr><tr><td>payload</td><td>select_body</td><td></td><td></td><tr><tr><td>columns</td><td>string</td><td>array</td><td></td><tr></table><p>Comment:CREATE VIEW / REPLACE VIEW / ALTER VIEW / CREATE OR REPLACE.</p></body> </html>", tooltip="CREATE VIEW / REPLACE VIEW / ALTER VIEW / CREATE OR REPLACE."];
_predicate [label="predicate", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>operands</td><td>expression</td><td>array</td><td></td><tr><tr><td>lhs_prefix</td><td>integer</td><td></td><td></td><tr><tr><td>lhs_type</td><td>string</td><td></td><td>item_list,expression</td><tr><tr><td>escape</td><td>string</td><td></td><td></td><tr><tr><td>type</td><td>string</td><td></td><td>trinary_op,comparison,unary_op,binary_op</td><tr><tr><td>class</td><td>string</td><td></td><td>predicate</td><tr><tr><td>op</td><td>string</td><td></td><td>between,=,not_=,>,>=,<,<=,<>,not_<>,in,not_in,is_null,not_is_null,json_operator,like,not_like,matches,not_matches,not,or,and,regex</td><tr></table><p>Comment:a scalar predicate expression.  Between operands: [left, start, end]. IN operands: [lhs, in_list] if lhs_type=expression</p></body> </html>", tooltip="a scalar predicate expression.  Between operands: [left, start, end]. IN operands: [lhs, in_list] if lhs_type=expression"];
_insert_stmt [label="insert_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>set</td><td>insert_set</td><td></td><td></td><tr><tr><td>returning</td><td>select_item</td><td>array</td><td></td><tr><tr><td>on_dup</td><td>insert_set</td><td></td><td></td><tr><tr><td>subselect</td><td>subselect</td><td></td><td></td><tr><tr><td>priority</td><td>string</td><td></td><td></td><tr><tr><td>returning_all</td><td>boolean</td><td></td><td></td><tr><tr><td>columns</td><td>colref</td><td>array</td><td></td><tr><tr><td>multiexpressions</td><td>expression_list</td><td>array</td><td></td><tr><tr><td>table</td><td>table_ref</td><td></td><td></td><tr><tr><td>expressions</td><td>expression_list</td><td></td><td></td><tr><tr><td>type</td><td>string</td><td></td><td>insert</td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr><tr><td>select</td><td>select_stmt</td><td></td><td></td><tr></table><p>Comment:INSERT</p></body> </html>", tooltip="INSERT"];
_select_body [label="select_body", shape=diamond, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body></table><p>Comment:Used where a SELECT kind of statement is expected, can be PlainSelect, SetOperationList, WithItem, ValuesStatement</p></body> </html>", tooltip="Used where a SELECT kind of statement is expected, can be PlainSelect, SetOperationList, WithItem, ValuesStatement"];
_select_expression_item [label="select_expression_item", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>alias</td><td>string</td><td></td><td></td><tr><tr><td>expression</td><td>expression</td><td></td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>select_item</td><tr></table><p>Comment:a specific (nameable) item in a select list</p></body> </html>", tooltip="a specific (nameable) item in a select list"];
_null_expression [label="null_expression", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>class</td><td>string</td><td></td><td>null</td><tr></table><p>Comment:a NULL</p></body> </html>", tooltip="a NULL"];
_plain_select [label="plain_select", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>from</td><td>from_item</td><td>array</td><td></td><tr><tr><td>distinct</td><td>boolean</td><td></td><td></td><tr><tr><td>into</td><td>table_ref</td><td>array</td><td></td><tr><tr><td>distinct_on</td><td>select_item</td><td>array</td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>select</td><tr><tr><td>select_list</td><td>select_item</td><td>array</td><td></td><tr><tr><td>for_update</td><td>table_ref</td><td>array</td><td></td><tr><tr><td>group_by</td><td>expression</td><td>array</td><td></td><tr><tr><td>joins</td><td>join_item</td><td>array</td><td></td><tr><tr><td>where</td><td>predicate</td><td></td><td></td><tr><tr><td>having</td><td>predicate</td><td>array</td><td></td><tr></table><p>Comment:A SELECT statement.  TODO having, for_update</p></body> </html>", tooltip="A SELECT statement.  TODO having, for_update"];
_join_item [label="join_item", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>on</td><td>expression</td><td></td><td></td><tr><tr><td>from</td><td>from_item</td><td></td><td></td><tr><tr><td>using</td><td>colref</td><td>array</td><td></td><tr><tr><td>type</td><td>join_item_type</td><td></td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>join_elem</td><tr></table><p>Comment:A from_item with X-join information attached.</p></body> </html>", tooltip="A from_item with X-join information attached."];
_colref [label="colref", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>column</td><td>string</td><td></td><td></td><tr><tr><td>tablename</td><td>table_ref</td><td></td><td></td><tr><tr><td>alias</td><td>string</td><td></td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>colref</td><tr></table><p>Comment:a reference to a field in a table</p></body> </html>", tooltip="a reference to a field in a table"];
_set_operation_list [label="set_operation_list", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>selects</td><td>select_body</td><td>array</td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>set_expr</td><tr><tr><td>set_ops</td><td>string</td><td>array</td><td></td><tr></table><p>Comment:A set operation (UNION. INTERSECT, etc.) on selects.  NOTE the number of set_ops strings should be one less than the number of selects items</p></body> </html>", tooltip="A set operation (UNION. INTERSECT, etc.) on selects.  NOTE the number of set_ops strings should be one less than the number of selects items"];
_row_constructor [label="row_constructor", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>class</td><td>string</td><td></td><td>rowconstructor</td><tr><tr><td>operands</td><td>expression</td><td>array</td><td></td><tr></table><p>Comment:a row constructor.  operands are [RHS, LHS]</p></body> </html>", tooltip="a row constructor.  operands are [RHS, LHS]"];
_table_ref [label="table_ref", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>name</td><td>string</td><td></td><td></td><tr><tr><td>database</td><td>string</td><td></td><td></td><tr><tr><td>alias</td><td>string</td><td></td><td></td><tr><tr><td>class</td><td>string</td><td></td><td>table</td><tr><tr><td>schema</td><td>string</td><td></td><td></td><tr></table><p>Comment:table reference</p></body> </html>", tooltip="table reference"];
_expression [label="expression", shape=diamond, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body></table><p>Comment:an element in a value computation, usually SE but not always.  There are many kinds of expressions.  Regular arithmatic and comparisons have wrapped up unary and binary ops</p></body> </html>", tooltip="an element in a value computation, usually SE but not always.  There are many kinds of expressions.  Regular arithmatic and comparisons have wrapped up unary and binary ops"];
_expression_list [label="expression_list", shape=doublecircle, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body></table><p>Comment:A list of expressions</p></body> </html>", tooltip="A list of expressions"];
_set_stmt [label="set_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td>set</td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr></table><p>Comment:SET`</p></body> </html>", tooltip="SET`"];
_upsert_stmt [label="upsert_stmt", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>type</td><td>string</td><td></td><td>upsert</td><tr><tr><td>class</td><td>string</td><td></td><td>statement</td><tr></table><p>Comment:UPSERT`</p></body> </html>", tooltip="UPSERT`"];
_when_then [label="when_then", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>then</td><td>expression</td><td></td><td></td><tr><tr><td>when</td><td>predicate</td><td></td><td></td><tr></table><p>Comment:when ... then ... component of a case_expression</p></body> </html>", tooltip="when ... then ... component of a case_expression"];
_from_item [label="from_item", shape=diamond, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body></table><p>Comment:something that can be in a FROM list.  TODO LateralSubSelect, SubJoin (seems missing from walk_tree), TableFunction </p></body> </html>", tooltip="something that can be in a FROM list.  TODO LateralSubSelect, SubJoin (seems missing from walk_tree), TableFunction "];
_all_table_columns [label="all_table_columns", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>table</td><td>table_ref</td><td></td><td></td><tr><tr><td>type</td><td>string</td><td></td><td>table</td><tr><tr><td>class</td><td>string</td><td></td><td>star</td><tr></table><p>Comment:the Foo.* in a SELECT Foo.*</p></body> </html>", tooltip="the Foo.* in a SELECT Foo.*"];
_join_item_type [label="join_item_type", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>right</td><td>boolean</td><td></td><td></td><tr><tr><td>join</td><td>boolean</td><td></td><td></td><tr><tr><td>semi</td><td>boolean</td><td></td><td></td><tr><tr><td>cross</td><td>boolean</td><td></td><td></td><tr><tr><td>natural</td><td>boolean</td><td></td><td></td><tr><tr><td>full</td><td>boolean</td><td></td><td></td><tr><tr><td>inner</td><td>boolean</td><td></td><td></td><tr><tr><td>left</td><td>boolean</td><td></td><td></td><tr><tr><td>outer</td><td>boolean</td><td></td><td></td><tr></table><p>Comment:a component of a join_item</p></body> </html>", tooltip="a component of a join_item"];
_insert_set [label="insert_set", shape=ellipse, tooltip="a construction used within an INSERT statement"];
_select_item [label="select_item", shape=diamond, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body></table><p>Comment:something that can be in a SELECT list</p></body> </html>", tooltip="something that can be in a SELECT list"];
_root [label="root", shape=doubleoctagon, htmltip="<!DOCTYPE html> <html> <head> <style> table, th, td { border: 1px solid black; } </style> </head> <body></table></body> </html>", tooltip="starting point"];
_se_op [label="se_op", shape=ellipse, htmltip="<!DOCTYPE html> <html> <head> </head> <body> <div style='max-width: 300px'><table><tr><th>field</th><th>type</th><th>array</th><th>enum</th></tr><tr><td>modifier</td><td>string</td><td></td><td></td><tr><tr><td>name</td><td>string</td><td></td><td></td><tr><tr><td>operands</td><td>expression</td><td>array</td><td></td><tr><tr><td>distinct</td><td>boolean</td><td></td><td></td><tr><tr><td>all_cols</td><td>boolean</td><td></td><td></td><tr><tr><td>escaped</td><td>boolean</td><td></td><td></td><tr><tr><td>col_type</td><td>string</td><td></td><td></td><tr><tr><td>op</td><td>string</td><td></td><td>+,-,/,*,&,|,||,<,>>,^,%,cast,extract,fcn</td><tr><tr><td>class</td><td>string</td><td></td><td>se_op</td><tr></table><p>Comment:a scalar expression arithmatic operation.  TODO named parameters for functions, need to add capability to the parse tree generator.</p></div></body> </html>", tooltip="a scalar expression arithmatic operation.  TODO named parameters for functions, need to add capability to the parse tree generator."];
_subquery_summary_expression->_select_body[tooltip="subquery"];
_field_def->_col_data_type[tooltip="type"];
_subselect->_with_item [color=red, tooltip="with[]"];
_subselect->_select_body[tooltip="body"];
_drop_stmt->_table_ref[tooltip="table"];
_case_expression->_predicate[tooltip="switch"];
_case_expression->_when_then [color=red, tooltip="operands[]"];
_case_expression->_expression[tooltip="else"];
_select_stmt->_with_item [color=red, tooltip="with[]"];
_select_stmt->_select_body[tooltip="payload"];
_create_table_stmt->_field_def [color=red, tooltip="payload[]"];
_create_table_stmt->_table_ref[tooltip="table"];
_create_table_stmt->_select_body[tooltip="select"];
_values_list->_expression_list [color=red, tooltip="expressions[]"];
_with_item->_select_item [color=red, tooltip="items[], select"];
_create_view_stmt->_table_ref[tooltip="table"];
_create_view_stmt->_select_body[tooltip="payload"];
_predicate->_expression [color=red, tooltip="operands[]"];
_insert_stmt->_subselect[tooltip="subselect"];
_insert_stmt->_expression_list [color=red, tooltip="multiexpressions[], expressions"];
_insert_stmt->_select_stmt[tooltip="select"];
_insert_stmt->_colref [color=red, tooltip="columns[]"];
_insert_stmt->_insert_set[tooltip="set, on_dup"];
_insert_stmt->_select_item [color=red, tooltip="returning[]"];
_insert_stmt->_table_ref[tooltip="table"];
_select_body->_set_operation_list[tooltip=""];
_select_body->_plain_select[tooltip=""];
_select_expression_item->_expression[tooltip="expression"];
_plain_select->_predicate [color=red, tooltip="having[], where"];
_plain_select->_from_item [color=red, tooltip="from[]"];
_plain_select->_select_item [color=red, tooltip="select_list[], distinct_on[]"];
_plain_select->_join_item [color=red, tooltip="joins[]"];
_plain_select->_table_ref [color=red, tooltip="for_update[], into[]"];
_plain_select->_expression [color=red, tooltip="group_by[]"];
_join_item->_from_item[tooltip="from"];
_join_item->_expression[tooltip="on"];
_join_item->_colref [color=red, tooltip="using[]"];
_join_item->_join_item_type[tooltip="type"];
_colref->_table_ref[tooltip="tablename"];
_set_operation_list->_select_body [color=red, tooltip="selects[]"];
_row_constructor->_expression [color=red, tooltip="operands[]"];
_expression->_predicate[tooltip=""];
_expression->_interval_expression[tooltip=""];
_expression->_subselect[tooltip=""];
_expression->_case_expression[tooltip=""];
_expression->_subquery_summary_expression[tooltip=""];
_expression->_named_parameter[tooltip=""];
_expression->_literal[tooltip=""];
_expression->_null_expression[tooltip=""];
_expression->_colref[tooltip=""];
_expression->_parameter[tooltip=""];
_expression->_row_constructor[tooltip=""];
_expression->_se_op[tooltip=""];
_expression_list->_expression [color=red, tooltip=""];
_when_then->_predicate[tooltip="when"];
_when_then->_expression[tooltip="then"];
_from_item->_values_list[tooltip=""];
_from_item->_table_ref[tooltip=""];
_from_item->_subselect[tooltip=""];
_all_table_columns->_table_ref[tooltip="table"];
_insert_set->_expression_list[tooltip="expressions"];
_insert_set->_colref [color=red, tooltip="columns[]"];
_select_item->_all_table_columns[tooltip=""];
_select_item->_all_columns[tooltip=""];
_select_item->_select_expression_item[tooltip=""];
_root->_create_index_stmt [color=red, tooltip=""];
_root->_replace_stmt [color=red, tooltip=""];
_root->_drop_stmt [color=red, tooltip=""];
_root->_delete_stmt [color=red, tooltip=""];
_root->_upsert_stmt [color=red, tooltip=""];
_root->_select_stmt [color=red, tooltip=""];
_root->_insert_stmt [color=red, tooltip=""];
_root->_execute_stmt [color=red, tooltip=""];
_root->_create_table_stmt [color=red, tooltip=""];
_root->_set_stmt [color=red, tooltip=""];
_root->_commit_stmt [color=red, tooltip=""];
_root->_create_view_stmt [color=red, tooltip=""];
_se_op->_expression [color=red, tooltip="operands[]"];
subgraph legend{
__anyof_array [label="anyof_array", shape=doubleoctagon];
__array [label="array", shape=doublecircle];
__anyof [label="anyof", shape=diamond];
__properties [label="properties", shape=ellipse];
}
}
