digraph exec_plan{
n1 [label="1: \nPhysical Plan", htmltip="<!DOCTYPE html> <html> <body></body> </html>", equiv="0"];
n2 [label="2: (580) AdaptiveSparkPlan\nAdaptiveSparkPlan", htmltip="<!DOCTYPE html> <html> <body>note: AdaptiveSparkPlan; <p>Arguments::  isFinalPlan=false</body> </html>", equiv="0"];
n3 [label="3: (579) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ip_iplocL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ip_iplocL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n4 [label="4: (573) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n5 [label="5: (572) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n6 [label="6: (571) HashAggregate\nHashAggregate
59", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [59]: [long_ipL, window, cnt_attempts_ip_5m, cnt_dist_usr_5m, cnt_dist_app_5mL, app_id_set_5m, username_set_5m, userAgent_5m, ip_address, attsdk_flag, sum_attsdk_flag_5m_cntL, max_targeted_user_score, min_targeted_user_score, 50th_targeted_user_score, 75th_targeted_user_score, 90th_targeted_user_score, 50th_cnt_5m, 50th_cntDistUser_5m, 50th_cntDistApp_5mL, 50th_cnt_15m, 50th_cntDistUser_15m, 50th_cntDistApp_15mL, 50th_cnt_60m, 50th_cntDistUser_60m, 50th_cntDistApp_60mL, 50th_timedelta_5m, stddev_timedelta_5m, tguard_data_dt, cnt_attempts_ip_15m, cnt_dist_usr_15m, cnt_dist_app_15mL, app_id_set_15m, 50th_timedelta_15m, stddev_timedelta_15m, cnt_attempts_ip_60m, cnt_dist_usr_60m, cnt_dist_app_60mL, app_id_set_60m, 50th_timedelta_60m, stddev_timedelta_60m, 5m_success_count, 5m_failed_count, 5m_suc_dist_usr, 5m_fail_dist_usr, 5m_suc_dist_appL, 5m_fail_dist_appL, 15m_success_count, 15m_failed_count, 15m_suc_dist_usr, 15m_fail_dist_usr, 15m_suc_dist_appL, 15m_fail_dist_appL, 60m_success_count, 60m_failed_count, 60m_suc_dist_usr, 60m_fail_dist_usr, 60m_suc_dist_appL, 60m_fail_dist_appL, heavy_hitters_flag]; <p>Functions::  []; <p>Aggregate:  Attributes: []; <p>Results:  [72]: [long_ipL, window, cnt_attempts_ip_5m, cnt_dist_usr_5m, cnt_dist_app_5mL, app_id_set_5m, username_set_5m, userAgent_5m, ip_address, attsdk_flag, sum_attsdk_flag_5m_cntL, max_targeted_user_score, min_targeted_user_score, 50th_targeted_user_score, 75th_targeted_user_score, 90th_targeted_user_score, 50th_cnt_5m, 50th_cntDistUser_5m, 50th_cntDistApp_5mL, 50th_cnt_15m, 50th_cntDistUser_15m, 50th_cntDistApp_15mL, 50th_cnt_60m, 50th_cntDistUser_60m, 50th_cntDistApp_60mL, 50th_timedelta_5m, stddev_timedelta_5m, tguard_data_dt, cnt_attempts_ip_15m, cnt_dist_usr_15m, cnt_dist_app_15mL, app_id_set_15m, 50th_timedelta_15m, stddev_timedelta_15m, cnt_attempts_ip_60m, cnt_dist_usr_60m, cnt_dist_app_60mL, app_id_set_60m, 50th_timedelta_60m, stddev_timedelta_60m, 5m_success_count, 5m_failed_count, 5m_suc_dist_usr, 5m_fail_dist_usr, 5m_suc_dist_appL, 5m_fail_dist_appL, 15m_success_count, 15m_failed_count, 15m_suc_dist_usr, 15m_fail_dist_usr, 15m_suc_dist_appL, 15m_fail_dist_appL, 60m_success_count, 60m_failed_count, 60m_suc_dist_usr, 60m_fail_dist_usr, 60m_suc_dist_appL, 60m_fail_dist_appL, heavy_hitters_flag, date_format(window.start, EEEE, Some(Etc/UTC)) AS day_of_week, CASE WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = SUNDAY) THEN -1.3887282 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = MONDAY) THEN -0.9258188 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = TUESDAY) THEN -0.4629094 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = WEDNESDAY) THEN 0E-7 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = THURSDAY) THEN 0.4629094 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = FRIDAY) THEN 0.9258188 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = SATURDAY) THEN 1.3887282 ELSE 0E-7 END AS dow, COS(cast(CheckOverflow((promote_precision(cast(cast(CASE WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = SUNDAY) THEN -3 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = MONDAY) THEN -2 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = TUESDAY) THEN -1 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = WEDNESDAY) THEN 0 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = THURSDAY) THEN 1 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = FRIDAY) THEN 2 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = SATURDAY) THEN 3 ELSE 0 END as decimal(10,0)) as decimal(15,5))) / 2.16025), DecimalType(22,7), true) as double)) AS distance_DOW, CASE WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = SUNDAY) THEN 1 WHEN (upper(date_format(window.start, EEEE, Some(Etc/UTC))) = SATURDAY) THEN 1 ELSE 0 END AS isWkend_flag, cast(window.start as bigint) AS long_start_timeL, cast(ephemeralsubstri</body> </html>", equiv="0"];
n7 [label="7: (570) Exchange\nExchange
hashpartitioning(long_ipL, window, cnt_a ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, cnt_attempts_ip_5m, cnt_dist_usr_5m, cnt_dist_app_5mL, app_id_set_5m, username_set_5m, userAgent_5m, ip_address, attsdk_flag, sum_attsdk_flag_5m_cntL, max_targeted_user_score, min_targeted_user_score, 50th_targeted_user_score, 75th_targeted_user_score, 90th_targeted_user_score, 50th_cnt_5m, 50th_cntDistUser_5m, 50th_cntDistApp_5mL, 50th_cnt_15m, 50th_cntDistUser_15m, 50th_cntDistApp_15mL, 50th_cnt_60m, 50th_cntDistUser_60m, ... 36 more fields), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n8 [label="8: (569) HashAggregate\nHashAggregate
59", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [59]: [long_ipL, window, knownfloatingpointnormalized(normalizenanandzero(cnt_attempts_ip_5m)) AS cnt_attempts_ip_5m, knownfloatingpointnormalized(normalizenanandzero(cnt_dist_usr_5m)) AS cnt_dist_usr_5m, cnt_dist_app_5mL, app_id_set_5m, username_set_5m, userAgent_5m, ip_address, attsdk_flag, sum_attsdk_flag_5m_cntL, max_targeted_user_score, min_targeted_user_score, 50th_targeted_user_score, 75th_targeted_user_score, 90th_targeted_user_score, knownfloatingpointnormalized(normalizenanandzero(50th_cnt_5m)) AS 50th_cnt_5m, knownfloatingpointnormalized(normalizenanandzero(50th_cntDistUser_5m)) AS 50th_cntDistUser_5m, 50th_cntDistApp_5mL, knownfloatingpointnormalized(normalizenanandzero(50th_cnt_15m)) AS 50th_cnt_15m, knownfloatingpointnormalized(normalizenanandzero(50th_cntDistUser_15m)) AS 50th_cntDistUser_15m, 50th_cntDistApp_15mL, knownfloatingpointnormalized(normalizenanandzero(50th_cnt_60m)) AS 50th_cnt_60m, knownfloatingpointnormalized(normalizenanandzero(50th_cntDistUser_60m)) AS 50th_cntDistUser_60m, 50th_cntDistApp_60mL, knownfloatingpointnormalized(normalizenanandzero(50th_timedelta_5m)) AS 50th_timedelta_5m, knownfloatingpointnormalized(normalizenanandzero(stddev_timedelta_5m)) AS stddev_timedelta_5m, tguard_data_dt, knownfloatingpointnormalized(normalizenanandzero(cnt_attempts_ip_15m)) AS cnt_attempts_ip_15m, knownfloatingpointnormalized(normalizenanandzero(cnt_dist_usr_15m)) AS cnt_dist_usr_15m, cnt_dist_app_15mL, app_id_set_15m, knownfloatingpointnormalized(normalizenanandzero(50th_timedelta_15m)) AS 50th_timedelta_15m, knownfloatingpointnormalized(normalizenanandzero(stddev_timedelta_15m)) AS stddev_timedelta_15m, knownfloatingpointnormalized(normalizenanandzero(cnt_attempts_ip_60m)) AS cnt_attempts_ip_60m, knownfloatingpointnormalized(normalizenanandzero(cnt_dist_usr_60m)) AS cnt_dist_usr_60m, cnt_dist_app_60mL, app_id_set_60m, knownfloatingpointnormalized(normalizenanandzero(50th_timedelta_60m)) AS 50th_timedelta_60m, knownfloatingpointnormalized(normalizenanandzero(stddev_timedelta_60m)) AS stddev_timedelta_60m, knownfloatingpointnormalized(normalizenanandzero(5m_success_count)) AS 5m_success_count, knownfloatingpointnormalized(normalizenanandzero(5m_failed_count)) AS 5m_failed_count, knownfloatingpointnormalized(normalizenanandzero(5m_suc_dist_usr)) AS 5m_suc_dist_usr, knownfloatingpointnormalized(normalizenanandzero(5m_fail_dist_usr)) AS 5m_fail_dist_usr, 5m_suc_dist_appL, 5m_fail_dist_appL, knownfloatingpointnormalized(normalizenanandzero(15m_success_count)) AS 15m_success_count, knownfloatingpointnormalized(normalizenanandzero(15m_failed_count)) AS 15m_failed_count, knownfloatingpointnormalized(normalizenanandzero(15m_suc_dist_usr)) AS 15m_suc_dist_usr, knownfloatingpointnormalized(normalizenanandzero(15m_fail_dist_usr)) AS 15m_fail_dist_usr, 15m_suc_dist_appL, 15m_fail_dist_appL, knownfloatingpointnormalized(normalizenanandzero(60m_success_count)) AS 60m_success_count, knownfloatingpointnormalized(normalizenanandzero(60m_failed_count)) AS 60m_failed_count, knownfloatingpointnormalized(normalizenanandzero(60m_suc_dist_usr)) AS 60m_suc_dist_usr, knownfloatingpointnormalized(normalizenanandzero(60m_fail_dist_usr)) AS 60m_fail_dist_usr, 60m_suc_dist_appL, 60m_fail_dist_appL, heavy_hitters_flag]; <p>Functions::  []; <p>Aggregate:  Attributes: []; <p>Results:  [59]: [long_ipL, window, cnt_attempts_ip_5m, cnt_dist_usr_5m, cnt_dist_app_5mL, app_id_set_5m, username_set_5m, userAgent_5m, ip_address, attsdk_flag, sum_attsdk_flag_5m_cntL, max_targeted_user_score, min_targeted_user_score, 50th_targeted_user_score, 75th_targeted_user_score, 90th_targeted_user_score, 50th_cnt_5m, 50th_cntDistUser_5m, 50th_cntDistApp_5mL, 50th_cnt_15m, 50th_cntDistUser_15m, 50th_cntDistApp_15mL, 50th_cnt_60m, 50th_cntDistUser_60m, 50th_cntDistApp_60mL, 50th_timedelta_5m, stddev_timedelta_5m, tguard_data_dt, cnt_attempts_ip_15m, cnt_dist_usr_15m, cnt_dist_app_15mL, app_id_set_15m, 50th_timedelta_15m, stddev_tim</body> </html>", equiv="0"];
n9 [label="9: (568) Union\nUnion", htmltip="<!DOCTYPE html> <html> <body>note: Union</body> </html>", equiv="0"];
n10 [label="10: (497) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n11 [label="11: (496) SortMergeJoin\nSortMergeJoin Inner
Left: long_ipL, window.end
Right: long_ipL, _gen_alias_2581293", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [2]: [long_ipL, window.end]; <p>Right:  keys [2]: [long_ipL, _gen_alias_2581293]; <p>Join:  condition: None</body> </html>", equiv="0"];
n12 [label="12: (386) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n13 [label="13: (385) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL, window.end
Right: long_ipL, _gen_alias_2581294", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [2]: [long_ipL, window.end]; <p>Right:  keys [2]: [long_ipL, _gen_alias_2581294]; <p>Join:  condition: None</body> </html>", equiv="0"];
n14 [label="14: (275) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n15 [label="15: (274) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL, window.end
Right: long_ipL, _gen_alias_2581295", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [2]: [long_ipL, window.end]; <p>Right:  keys [2]: [long_ipL, _gen_alias_2581295]; <p>Join:  condition: None</body> </html>", equiv="0"];
n16 [label="16: (170) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n17 [label="17: (169) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL, window.end
Right: long_ipL, _gen_alias_2581296", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [2]: [long_ipL, window.end]; <p>Right:  keys [2]: [long_ipL, _gen_alias_2581296]; <p>Join:  condition: None</body> </html>", equiv="0"];
n18 [label="18: (112) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n19 [label="19: (111) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL, window.end
Right: long_ipL, _gen_alias_2581297", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [2]: [long_ipL, window.end]; <p>Right:  keys [2]: [long_ipL, _gen_alias_2581297]; <p>Join:  condition: None</body> </html>", equiv="0"];
n20 [label="20: (54) Sort\nSort
long_ipL ASC NULLS FIRST, window.end ASC ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window.end ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n21 [label="21: (53) Exchange\nExchange
hashpartitioning(long_ipL, window.end, 1 ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window.end, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n22 [label="22: (52) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(long_ipL)</body> </html>", equiv="0"];
n23 [label="23: (51) SortAggregate\nSortAggregate", htmltip="<!DOCTYPE html> <html> <body>note: SortAggregate; <p>Keys:  [2]: [long_ipL, window]; <p>Functions:  [26]: [finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, finalmerge_count(merge countL) AS count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, finalmerge_count(merge countL) AS count(if ((gid = 2)) t.`application_id` else null)L, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) collect_set(t.`application_id`) else null) ignore nulls, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) collect_set(__auto_generated_subquery_name.`username`) else null) ignore nulls, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) collect_set(t.`userAgent`) else null) ignore nulls, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) first(t.`ip_address`) else null) ignore nulls, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) max(t.`attsdk_flag`) else null) ignore nulls, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) sum(CAST(t.`attsdk_flag` AS BIGINT))L else null) ignore nullsL, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) max(u.`targeted_user_score`) else null) ignore nulls, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) min(u.`targeted_user_score`) else null) ignore nulls, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) percentile_approx(u.`targeted_user_score`, [0.5,0.75,0.9], 10000) else null) ignore nulls, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) percentile_approx(u.`targeted_user_score`, [0.5,0.75,0.9], 10000) else null) ignore nulls, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) percentile_approx(u.`targeted_user_score`, [0.5,0.75,0.9], 10000) else null) ignore nulls, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cnt_5m`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistUser_5m`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistApp_5m`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cnt_15m`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistUser_15m`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistApp_15m`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cnt_60m`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistUser_60m`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistApp_60m`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`timedelta`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) stddev_samp(CAST(__auto_generated_subquery_name.`timedelta` AS DOUBLE)) else null) ignore nulls, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) max(__auto_generated_subquery_name.`tguard_data_dt`) else null) ignore nulls]; <p>Aggregate:  Attributes [26]: [first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, count(if</body> </html>", equiv="0"];
n24 [label="24: (50) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n25 [label="25: (49) Exchange\nExchange
hashpartitioning(long_ipL, window, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n26 [label="26: (48) SortAggregate\nSortAggregate", htmltip="<!DOCTYPE html> <html> <body>note: SortAggregate; <p>Keys:  [2]: [long_ipL, window]; <p>Functions:  [26]: [partial_first(if ((gid = 0)) count(t.`long_ip`)L else null, true) AS (firstL, valueSet), partial_count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null) AS countL, partial_count(if ((gid = 2)) t.`application_id` else null) AS countL, partial_first(if ((gid = 0)) collect_set(t.`application_id`) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) collect_set(__auto_generated_subquery_name.`username`) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) collect_set(t.`userAgent`) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) first(t.`ip_address`) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) max(t.`attsdk_flag`) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) sum(CAST(t.`attsdk_flag` AS BIGINT))L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) max(u.`targeted_user_score`) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) min(u.`targeted_user_score`) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) percentile_approx(u.`targeted_user_score`, [0.5,0.75,0.9], 10000) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) percentile_approx(u.`targeted_user_score`, [0.5,0.75,0.9], 10000) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) percentile_approx(u.`targeted_user_score`, [0.5,0.75,0.9], 10000) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cnt_5m`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistUser_5m`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistApp_5m`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cnt_15m`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistUser_15m`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistApp_15m`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cnt_60m`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistUser_60m`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`cntDistApp_60m`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) percentile_approx(__auto_generated_subquery_name.`timedelta`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) stddev_samp(CAST(__auto_generated_subquery_name.`timedelta` AS DOUBLE)) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) max(__auto_generated_subquery_name.`tguard_data_dt`) else null, true) AS (first, valueSet)]; <p>Aggregate:  Attributes [50]: [firstL, valueSet, countL, countL, first, valueSet, first, valueSet, first, valueSet, first, valueSet, first, valueSet, firstL, valueSet, first, valueSet, first, valueSet, first, valueSet, first, valueSet, first, valueSet, firstL, valueSet, firstL, valueSet, firstL, valueSet, firstL, valueSet, firstL, valueSet, firstL, valueSet, firstL, valueSet, firstL, valueSet, firstL, valueSet, firstL, valueSet, first, valueSet, first, valueSet]; <p>Results:  [52]: [long_ipL, window, firstL, valueSet, countL, countL, first, valueSet, first, valueSet, first, valueSet, first, valueSet, first, valueSet, firstL, valueSet, first, valueSet, first, valueSet, first, valueSet, first, valueSet, first, valueSet, firs</body> </html>", equiv="0"];
n27 [label="27: (47) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n28 [label="28: (46) ObjectHashAggregate\nObjectHashAggregate
5", htmltip="<!DOCTYPE html> <html> <body>note: ObjectHashAggregate; <p>Keys:  [5]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [22]: [finalmerge_count(merge countL) AS count(t.`long_ip`L)L, finalmerge_collect_set(merge buf) AS collect_set(t.`application_id`, 0, 0), finalmerge_collect_set(merge buf) AS collect_set(__auto_generated_subquery_name.`username`, 0, 0), finalmerge_collect_set(merge buf) AS collect_set(t.`userAgent`, 0, 0), finalmerge_first(merge first, valueSet) AS first(t.`ip_address`)(), finalmerge_max(merge max) AS max(t.`attsdk_flag`), finalmerge_sum(merge sumL) AS sum(CAST(t.`attsdk_flag` AS BIGINT)L)L, finalmerge_max(merge max) AS max(u.`targeted_user_score`), finalmerge_min(merge min) AS min(u.`targeted_user_score`), finalmerge_percentile_approx(merge buf) AS percentile_approx(u.`targeted_user_score`, [0.5,0.75,0.9], 10000, 0, 0), finalmerge_percentile_approx(merge buf) AS percentile_approx(__auto_generated_subquery_name.`cnt_5m`L, 0.5, 10000, 0, 0)L, finalmerge_percentile_approx(merge buf) AS percentile_approx(__auto_generated_subquery_name.`cntDistUser_5m`L, 0.5, 10000, 0, 0)L, finalmerge_percentile_approx(merge buf) AS percentile_approx(__auto_generated_subquery_name.`cntDistApp_5m`L, 0.5, 10000, 0, 0)L, finalmerge_percentile_approx(merge buf) AS percentile_approx(__auto_generated_subquery_name.`cnt_15m`L, 0.5, 10000, 0, 0)L, finalmerge_percentile_approx(merge buf) AS percentile_approx(__auto_generated_subquery_name.`cntDistUser_15m`L, 0.5, 10000, 0, 0)L, finalmerge_percentile_approx(merge buf) AS percentile_approx(__auto_generated_subquery_name.`cntDistApp_15m`L, 0.5, 10000, 0, 0)L, finalmerge_percentile_approx(merge buf) AS percentile_approx(__auto_generated_subquery_name.`cnt_60m`L, 0.5, 10000, 0, 0)L, finalmerge_percentile_approx(merge buf) AS percentile_approx(__auto_generated_subquery_name.`cntDistUser_60m`L, 0.5, 10000, 0, 0)L, finalmerge_percentile_approx(merge buf) AS percentile_approx(__auto_generated_subquery_name.`cntDistApp_60m`L, 0.5, 10000, 0, 0)L, finalmerge_percentile_approx(merge buf) AS percentile_approx(__auto_generated_subquery_name.`timedelta`L, 0.5, 10000, 0, 0)L, finalmerge_stddev_samp(merge n, avg, m2) AS stddev_samp(CAST(__auto_generated_subquery_name.`timedelta` AS DOUBLE)), finalmerge_max(merge max) AS max(__auto_generated_subquery_name.`tguard_data_dt`)]; <p>Aggregate:  Attributes [22]: [count(t.`long_ip`L)L, collect_set(t.`application_id`, 0, 0), collect_set(__auto_generated_subquery_name.`username`, 0, 0), collect_set(t.`userAgent`, 0, 0), first(t.`ip_address`)(), max(t.`attsdk_flag`), sum(CAST(t.`attsdk_flag` AS BIGINT)L)L, max(u.`targeted_user_score`), min(u.`targeted_user_score`), percentile_approx(u.`targeted_user_score`, [0.5,0.75,0.9], 10000, 0, 0), percentile_approx(__auto_generated_subquery_name.`cnt_5m`L, 0.5, 10000, 0, 0)L, percentile_approx(__auto_generated_subquery_name.`cntDistUser_5m`L, 0.5, 10000, 0, 0)L, percentile_approx(__auto_generated_subquery_name.`cntDistApp_5m`L, 0.5, 10000, 0, 0)L, percentile_approx(__auto_generated_subquery_name.`cnt_15m`L, 0.5, 10000, 0, 0)L, percentile_approx(__auto_generated_subquery_name.`cntDistUser_15m`L, 0.5, 10000, 0, 0)L, percentile_approx(__auto_generated_subquery_name.`cntDistApp_15m`L, 0.5, 10000, 0, 0)L, percentile_approx(__auto_generated_subquery_name.`cnt_60m`L, 0.5, 10000, 0, 0)L, percentile_approx(__auto_generated_subquery_name.`cntDistUser_60m`L, 0.5, 10000, 0, 0)L, percentile_approx(__auto_generated_subquery_name.`cntDistApp_60m`L, 0.5, 10000, 0, 0)L, percentile_approx(__auto_generated_subquery_name.`timedelta`L, 0.5, 10000, 0, 0)L, stddev_samp(CAST(__auto_generated_subquery_name.`timedelta` AS DOUBLE)), max(__auto_generated_subquery_name.`tguard_data_dt`)]; <p>Results:  [29]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, count(t.`long_ip`L)L AS count(t.`long_ip`)L, collect_set(t.`application_id`, 0, 0) AS collect_set(t.`application_id`), collect_set(__auto_ge</body> </html>", equiv="0"];
n29 [label="29: (45) Exchange\nExchange
hashpartitioning(long_ipL, window, __aut ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n30 [label="30: (44) ObjectHashAggregate\nObjectHashAggregate
5", htmltip="<!DOCTYPE html> <html> <body>note: ObjectHashAggregate; <p>Keys:  [5]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [22]: [partial_count(t.`long_ip`L) AS countL, partial_collect_set(t.`application_id`, 0, 0) AS buf, partial_collect_set(__auto_generated_subquery_name.`username`, 0, 0) AS buf, partial_collect_set(t.`userAgent`, 0, 0) AS buf, partial_first(t.`ip_address`, false) AS (first, valueSet), partial_max(t.`attsdk_flag`) AS max, partial_sum(CAST(t.`attsdk_flag` AS BIGINT)L) AS sumL, partial_max(u.`targeted_user_score`) AS max, partial_min(u.`targeted_user_score`) AS min, partial_percentile_approx(u.`targeted_user_score`, [0.5,0.75,0.9], 10000, 0, 0) AS buf, partial_percentile_approx(__auto_generated_subquery_name.`cnt_5m`L, 0.5, 10000, 0, 0) AS buf, partial_percentile_approx(__auto_generated_subquery_name.`cntDistUser_5m`L, 0.5, 10000, 0, 0) AS buf, partial_percentile_approx(__auto_generated_subquery_name.`cntDistApp_5m`L, 0.5, 10000, 0, 0) AS buf, partial_percentile_approx(__auto_generated_subquery_name.`cnt_15m`L, 0.5, 10000, 0, 0) AS buf, partial_percentile_approx(__auto_generated_subquery_name.`cntDistUser_15m`L, 0.5, 10000, 0, 0) AS buf, partial_percentile_approx(__auto_generated_subquery_name.`cntDistApp_15m`L, 0.5, 10000, 0, 0) AS buf, partial_percentile_approx(__auto_generated_subquery_name.`cnt_60m`L, 0.5, 10000, 0, 0) AS buf, partial_percentile_approx(__auto_generated_subquery_name.`cntDistUser_60m`L, 0.5, 10000, 0, 0) AS buf, partial_percentile_approx(__auto_generated_subquery_name.`cntDistApp_60m`L, 0.5, 10000, 0, 0) AS buf, partial_percentile_approx(__auto_generated_subquery_name.`timedelta`L, 0.5, 10000, 0, 0) AS buf, partial_stddev_samp(CAST(__auto_generated_subquery_name.`timedelta` AS DOUBLE)) AS (n, avg, m2), partial_max(__auto_generated_subquery_name.`tguard_data_dt`) AS max]; <p>Aggregate:  Attributes [25]: [countL, buf, buf, buf, first, valueSet, max, sumL, max, min, buf, buf, buf, buf, buf, buf, buf, buf, buf, buf, buf, n, avg, m2, max]; <p>Results:  [30]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, countL, buf, buf, buf, first, valueSet, max, sumL, max, min, buf, buf, buf, buf, buf, buf, buf, buf, buf, buf, buf, n, avg, m2, max]</body> </html>", equiv="0"];
n31 [label="31: (43) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [ArrayBuffer(long_ipL, window, null, null, 0, long_ipL, application_id, username, userAgent, ip_address, attsdk_flag, cast(attsdk_flag as bigint), targeted_user_score, cnt_5mL, cntDistUser_5mL, cntDistApp_5mL, cnt_15mL, cntDistUser_15mL, cntDistApp_15mL, cnt_60mL, cntDistUser_60mL, cntDistApp_60mL, timedeltaL, cast(timedeltaL as double), tguard_data_dt), ArrayBuffer(long_ipL, window, username, null, 1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null), ArrayBuffer(long_ipL, window, null, application_id, 2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)], [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, t.`long_ip`L, t.`application_id`, __auto_generated_subquery_name.`username`, t.`userAgent`, t.`ip_address`, t.`attsdk_flag`, CAST(t.`attsdk_flag` AS BIGINT)L, u.`targeted_user_score`, __auto_generated_subquery_name.`cnt_5m`L, __auto_generated_subquery_name.`cntDistUser_5m`L, __auto_generated_subquery_name.`cntDistApp_5m`L, __auto_generated_subquery_name.`cnt_15m`L, __auto_generated_subquery_name.`cntDistUser_15m`L, __auto_generated_subquery_name.`cntDistApp_15m`L, __auto_generated_subquery_name.`cnt_60m`L, __auto_generated_subquery_name.`cntDistUser_60m`L, __auto_generated_subquery_name.`cntDistApp_60m`L, __auto_generated_subquery_name.`timedelta`L, CAST(__auto_generated_subquery_name.`timedelta` AS DOUBLE), __auto_generated_subquery_name.`tguard_data_dt`]</body> </html>", equiv="0"];
n32 [label="32: (42) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n33 [label="33: (41) SortMergeJoin\nSortMergeJoin LeftOuter
Left: username
Right: un", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [username]; <p>Right:  keys [1]: [un]; <p>Join:  condition: None</body> </html>", equiv="0"];
n34 [label="34: (35) Sort\nSort
username ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [username ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n35 [label="35: (34) Exchange\nExchange
hashpartitioning(username, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(username, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n36 [label="36: (33) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n37 [label="37: (32) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(transaction_date_time)</body> </html>", equiv="0"];
n38 [label="38: (31) Window\nWindow", htmltip="<!DOCTYPE html> <html> <body>note: Window; <p>Arguments::  [ip_address, long_ipL, attsdk_flag, username, userAgent, application_id, transaction_date_time, count(1) windowspecdefinition(long_ipL, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RangeFrame, -5 minutes, currentrow$())) AS cnt_5mL, count(1) windowspecdefinition(long_ipL, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RangeFrame, -15 minutes, currentrow$())) AS cnt_15mL, count(1) windowspecdefinition(long_ipL, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RangeFrame, -1 hours, currentrow$())) AS cnt_60mL, approx_count_distinct(username, 0.05, 0, 0) windowspecdefinition(long_ipL, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RangeFrame, -5 minutes, currentrow$())) AS cntDistUser_5mL, approx_count_distinct(username, 0.05, 0, 0) windowspecdefinition(long_ipL, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RangeFrame, -15 minutes, currentrow$())) AS cntDistUser_15mL, approx_count_distinct(username, 0.05, 0, 0) windowspecdefinition(long_ipL, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RangeFrame, -1 hours, currentrow$())) AS cntDistUser_60mL, approx_count_distinct(application_id, 0.05, 0, 0) windowspecdefinition(long_ipL, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RangeFrame, -5 minutes, currentrow$())) AS cntDistApp_5mL, approx_count_distinct(application_id, 0.05, 0, 0) windowspecdefinition(long_ipL, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RangeFrame, -15 minutes, currentrow$())) AS cntDistApp_15mL, approx_count_distinct(application_id, 0.05, 0, 0) windowspecdefinition(long_ipL, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RangeFrame, -1 hours, currentrow$())) AS cntDistApp_60mL, coalesce(timedeltaL, 12000) AS timedeltaL, data_dt AS tguard_data_dt], [long_ipL], [transaction_date_time ASC NULLS FIRST]</body> </html>", equiv="0"];
n39 [label="39: (30) Sort\nSort
long_ipL ASC NULLS FIRST, transaction_da ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, transaction_date_time ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n40 [label="40: (29) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n41 [label="41: (28) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n42 [label="42: (27) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n43 [label="43: (21) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n44 [label="44: (20) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n45 [label="45: (19) BroadcastHashJoin\nBroadcastHashJoin LeftAnti BuildRight
Left: ip_address
Right: ip_address", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastHashJoin; <p>Left:  keys [1]: [ip_address]; <p>Right:  keys [1]: [ip_address]; <p>Join:  condition: None</body> </html>", equiv="0"];
n46 [label="46: (1) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, attsdk_flag, transaction_date_time, data_dt, timedeltaL]</body> </html>", equiv="0"];
n47 [label="47: (2) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n48 [label="48: (12) Filter\n* Filter", htmltip="<!DOCTYPE html> <html> <body>note: Filter [codegen id : 3]; <p>Condition:  : (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000))</body> </html>", equiv="0"];
n49 [label="49: (11) Window\nWindow", htmltip="<!DOCTYPE html> <html> <body>note: Window; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]</body> </html>", equiv="0"];
n50 [label="50: (10) Sort\nSort
ip_address ASC NULLS FIRST, transaction_ ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [ip_address ASC NULLS FIRST, transaction_date_time ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n51 [label="51: (9) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n52 [label="52: (8) Project\n* Project", htmltip="<!DOCTYPE html> <html> <body>note: Project [codegen id : 2]</body> </html>", equiv="0"];
n53 [label="53: (7) BatchEvalPython\nBatchEvalPython", htmltip="<!DOCTYPE html> <html> <body>note: BatchEvalPython; <p>Arguments::  [Convert_To_Long(jsonData.sourceIp)], [pythonUDF0L]</body> </html>", equiv="0"];
n54 [label="54: (6) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n55 [label="55: (5) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (((((isnotnull(body_str) AND isnotnull(from_json(StructField(sourceIp,StringType,true), body_str, Some(Etc/UTC)).sourceIp)) AND (length(from_json(StructField(sourceIp,StringType,true), body_str, Some(Etc/UTC)).sourceIp) >= 7)) AND (length(from_json(StructField(sourceIp,StringType,true), body_str, Some(Etc/UTC)).sourceIp) <= 15)) AND (size(split(from_json(StructField(sourceIp,StringType,true), body_str, Some(Etc/UTC)).sourceIp, [.], -1), true) = 4)) AND NOT (length(split(from_json(StructField(sourceIp,StringType,true), body_str, Some(Etc/UTC)).sourceIp, [.], -1)[3]) = 0))</body> </html>", equiv="0"];
n56 [label="56: (4) ColumnarToRow\n* ColumnarToRow", htmltip="<!DOCTYPE html> <html> <body>note: ColumnarToRow [codegen id : 1]</body> </html>", equiv="0"];
n57 [label="57: (3) Scan\nScan parquet \nhaloc_stream_1min_flink/data]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  PreparedDeltaFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_stream_1min_flink/data]; <p>PartitionFilters::  [isnotnull(data_dt), (data_dt >= 2022112920)]; <p>PushedFilters::  [IsNotNull(body_str)]; <p>ReadSchema::  struct<body_str:string></body> </html>", equiv="0"];
n58 [label="58: (18) BroadcastExchange\nBroadcastExchange
HashedRelationBroadcastMode(List(input[0 ...", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastExchange; <p>Arguments::  HashedRelationBroadcastMode(List(input[0, string, true]),true), [id=]</body> </html>", equiv="1"];
n59 [label="59: (17) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="2"];
n60 [label="60: (16) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (ip_trans_cntL > 1500)</body> </html>", equiv="0"];
n61 [label="61: (15) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(1)L]; <p>Aggregate:  Attributes [1]: [count(1)L]; <p>Results:  [2]: [ip_address, count(1)L AS ip_trans_cntL]</body> </html>", equiv="0"];
n62 [label="62: (14) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n63 [label="63: (13) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [partial_count(1) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [2]: [ip_address, countL]</body> </html>", equiv="0"];
n64 [label="64: (12) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n65 [label="65: (11) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n66 [label="66: (10) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n67 [label="67: (4) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n68 [label="68: (3) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n69 [label="69: (2) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL]</body> </html>", equiv="3"];
n70 [label="70: (3) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n71 [label="71: (9) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n72 [label="72: (8) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n73 [label="73: (7) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n74 [label="74: (6) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n75 [label="75: (5) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n76 [label="76: (26) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n77 [label="77: (25) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n78 [label="78: (24) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n79 [label="79: (23) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n80 [label="80: (22) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n81 [label="81: (40) Sort\nSort
un ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [un ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n82 [label="82: (39) Exchange\nExchange
hashpartitioning(un, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(un, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n83 [label="83: (38) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n84 [label="84: (37) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(userName)</body> </html>", equiv="0"];
n85 [label="85: (36) Scan\nScan parquet \nitial_data/usr_distip_cnt_map]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/usr_distip_cnt_map]; <p>PartitionFilters::  [isnotnull(data_dt), (data_dt = 2022080317)]; <p>PushedFilters::  [IsNotNull(userName)]; <p>ReadSchema::  struct<userName:string,userName_dist_flag:int></body> </html>", equiv="0"];
n86 [label="86: (110) Sort\nSort
long_ipL ASC NULLS FIRST, _gen_alias_258 ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, _gen_alias_2581297 ASC NULLS FIRST], false, 0</body> </html>", equiv="5"];
n87 [label="87: (109) Exchange\nExchange
hashpartitioning(long_ipL, _gen_alias_25 ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, _gen_alias_2581297, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n88 [label="88: (108) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n89 [label="89: (107) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (isnotnull(long_ipL) AND isnotnull(window.end))</body> </html>", equiv="0"];
n90 [label="90: (106) SortAggregate\nSortAggregate", htmltip="<!DOCTYPE html> <html> <body>note: SortAggregate; <p>Keys:  [2]: [long_ipL, window]; <p>Functions:  [6]: [finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) count(__auto_generated_subquery_name.`long_ip`)L else null) ignore nullsL, finalmerge_count(merge countL) AS count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, finalmerge_count(merge countL) AS count(if ((gid = 2)) t.`application_id` else null)L, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) collect_set(t.`application_id`) else null) ignore nulls, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(t.`timedelta`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) stddev_samp(CAST(t.`timedelta` AS DOUBLE)) else null) ignore nulls]; <p>Aggregate:  Attributes [6]: [first(if ((gid = 0)) count(__auto_generated_subquery_name.`long_ip`)L else null) ignore nullsL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, count(if ((gid = 2)) t.`application_id` else null)L, first(if ((gid = 0)) collect_set(t.`application_id`) else null) ignore nulls, first(if ((gid = 0)) percentile_approx(t.`timedelta`, 0.5D, 10000)L else null) ignore nullsL, first(if ((gid = 0)) stddev_samp(CAST(t.`timedelta` AS DOUBLE)) else null) ignore nulls]; <p>Results:  [8]: [long_ipL, window, coalesce(first(if ((gid = 0)) count(__auto_generated_subquery_name.`long_ip`)L else null) ignore nullsL, 0) AS cnt_attempts_ip_15mL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L AS cnt_dist_usr_15mL, count(if ((gid = 2)) t.`application_id` else null)L AS cnt_dist_app_15mL, coalesce(first(if ((gid = 0)) collect_set(t.`application_id`) else null) ignore nulls, []) AS app_id_set_15m, first(if ((gid = 0)) percentile_approx(t.`timedelta`, 0.5D, 10000)L else null) ignore nullsL AS 50th_timedelta_15mL, first(if ((gid = 0)) stddev_samp(CAST(t.`timedelta` AS DOUBLE)) else null) ignore nulls AS stddev_timedelta_15m]</body> </html>", equiv="0"];
n91 [label="91: (105) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n92 [label="92: (104) Exchange\nExchange
hashpartitioning(long_ipL, window, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n93 [label="93: (103) SortAggregate\nSortAggregate", htmltip="<!DOCTYPE html> <html> <body>note: SortAggregate; <p>Keys:  [2]: [long_ipL, window]; <p>Functions:  [6]: [partial_first(if ((gid = 0)) count(__auto_generated_subquery_name.`long_ip`)L else null, true) AS (firstL, valueSet), partial_count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null) AS countL, partial_count(if ((gid = 2)) t.`application_id` else null) AS countL, partial_first(if ((gid = 0)) collect_set(t.`application_id`) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) percentile_approx(t.`timedelta`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) stddev_samp(CAST(t.`timedelta` AS DOUBLE)) else null, true) AS (first, valueSet)]; <p>Aggregate:  Attributes [10]: [firstL, valueSet, countL, countL, first, valueSet, firstL, valueSet, first, valueSet]; <p>Results:  [12]: [long_ipL, window, firstL, valueSet, countL, countL, first, valueSet, firstL, valueSet, first, valueSet]</body> </html>", equiv="0"];
n94 [label="94: (102) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n95 [label="95: (101) ObjectHashAggregate\nObjectHashAggregate
5", htmltip="<!DOCTYPE html> <html> <body>note: ObjectHashAggregate; <p>Keys:  [5]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [4]: [finalmerge_count(merge countL) AS count(__auto_generated_subquery_name.`long_ip`L)L, finalmerge_collect_set(merge buf) AS collect_set(t.`application_id`, 0, 0), finalmerge_percentile_approx(merge buf) AS percentile_approx(t.`timedelta`L, 0.5, 10000, 0, 0)L, finalmerge_stddev_samp(merge n, avg, m2) AS stddev_samp(CAST(t.`timedelta` AS DOUBLE))]; <p>Aggregate:  Attributes [4]: [count(__auto_generated_subquery_name.`long_ip`L)L, collect_set(t.`application_id`, 0, 0), percentile_approx(t.`timedelta`L, 0.5, 10000, 0, 0)L, stddev_samp(CAST(t.`timedelta` AS DOUBLE))]; <p>Results:  [9]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, count(__auto_generated_subquery_name.`long_ip`L)L AS count(__auto_generated_subquery_name.`long_ip`)L, collect_set(t.`application_id`, 0, 0) AS collect_set(t.`application_id`), percentile_approx(t.`timedelta`L, 0.5, 10000, 0, 0)L AS percentile_approx(t.`timedelta`, 0.5D, 10000)L, stddev_samp(CAST(t.`timedelta` AS DOUBLE)) AS stddev_samp(CAST(t.`timedelta` AS DOUBLE))]</body> </html>", equiv="0"];
n96 [label="96: (100) Exchange\nExchange
hashpartitioning(long_ipL, window, __aut ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n97 [label="97: (99) ObjectHashAggregate\nObjectHashAggregate
5", htmltip="<!DOCTYPE html> <html> <body>note: ObjectHashAggregate; <p>Keys:  [5]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [4]: [partial_count(__auto_generated_subquery_name.`long_ip`L) AS countL, partial_collect_set(t.`application_id`, 0, 0) AS buf, partial_percentile_approx(t.`timedelta`L, 0.5, 10000, 0, 0) AS buf, partial_stddev_samp(CAST(t.`timedelta` AS DOUBLE)) AS (n, avg, m2)]; <p>Aggregate:  Attributes [6]: [countL, buf, buf, n, avg, m2]; <p>Results:  [11]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, countL, buf, buf, n, avg, m2]</body> </html>", equiv="0"];
n98 [label="98: (98) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [ArrayBuffer(long_ipL, window, null, null, 0, long_ipL, application_id, timedeltaL, cast(timedeltaL as double)), ArrayBuffer(long_ipL, window, username, null, 1, null, null, null, null), ArrayBuffer(long_ipL, window, null, application_id, 2, null, null, null, null)], [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, __auto_generated_subquery_name.`long_ip`L, t.`application_id`, t.`timedelta`L, CAST(t.`timedelta` AS DOUBLE)]</body> </html>", equiv="6"];
n99 [label="99: (97) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n100 [label="100: (96) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : ((isnotnull(window) AND (transaction_date_time >= window.start)) AND (transaction_date_time < window.end))</body> </html>", equiv="0"];
n101 [label="101: (95) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 3) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 3) * 300000000) + 900000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, timedeltaL), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 3) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 3) * 300000000) + 900000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, timedeltaL), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 3) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 3) * 300000000) + 900000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, timedeltaL)], [window, long_ipL, username, application_id, transaction_date_time, timedeltaL]</body> </html>", equiv="7"];
n102 [label="102: (94) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n103 [label="103: (93) SortMergeJoin\nSortMergeJoin LeftOuter
Left: username
Right: un", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [username]; <p>Right:  keys [1]: [un]; <p>Join:  condition: None</body> </html>", equiv="0"];
n104 [label="104: (87) Sort\nSort
username ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [username ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n105 [label="105: (86) Exchange\nExchange
hashpartitioning(username, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(username, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n106 [label="106: (85) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n107 [label="107: (84) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n108 [label="108: (83) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n109 [label="109: (77) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n110 [label="110: (76) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n111 [label="111: (75) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n112 [label="112: (74) BroadcastHashJoin\nBroadcastHashJoin LeftAnti BuildRight
Left: ip_address
Right: ip_address", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastHashJoin; <p>Left:  keys [1]: [ip_address]; <p>Right:  keys [1]: [ip_address]; <p>Join:  condition: None</body> </html>", equiv="0"];
n113 [label="113: (56) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(transaction_date_time)</body> </html>", equiv="8"];
n114 [label="114: (55) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL, application_id, userName, transaction_date_time, timedeltaL], [isnotnull(transaction_date_time)]</body> </html>", equiv="3"];
n115 [label="115: (56) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n116 [label="116: (73) BroadcastExchange\nBroadcastExchange
HashedRelationBroadcastMode(List(input[0 ...", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastExchange; <p>Arguments::  HashedRelationBroadcastMode(List(input[0, string, true]),true), [id=]</body> </html>", equiv="1"];
n117 [label="117: (72) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="2"];
n118 [label="118: (71) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (ip_trans_cntL > 1500)</body> </html>", equiv="0"];
n119 [label="119: (70) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(1)L]; <p>Aggregate:  Attributes [1]: [count(1)L]; <p>Results:  [2]: [ip_address, count(1)L AS ip_trans_cntL]</body> </html>", equiv="0"];
n120 [label="120: (69) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n121 [label="121: (68) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [partial_count(1) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [2]: [ip_address, countL]</body> </html>", equiv="0"];
n122 [label="122: (67) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n123 [label="123: (66) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n124 [label="124: (65) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n125 [label="125: (59) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n126 [label="126: (58) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n127 [label="127: (57) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL]</body> </html>", equiv="3"];
n128 [label="128: (58) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n129 [label="129: (64) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n130 [label="130: (63) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n131 [label="131: (62) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n132 [label="132: (61) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n133 [label="133: (60) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n134 [label="134: (82) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n135 [label="135: (81) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n136 [label="136: (80) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n137 [label="137: (79) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n138 [label="138: (78) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n139 [label="139: (92) Sort\nSort
un ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [un ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n140 [label="140: (91) Exchange\nExchange
hashpartitioning(un, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(un, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n141 [label="141: (90) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n142 [label="142: (89) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(userName)</body> </html>", equiv="0"];
n143 [label="143: (88) Scan\nScan parquet \nitial_data/usr_distip_cnt_map]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/usr_distip_cnt_map]; <p>PartitionFilters::  [isnotnull(data_dt), (data_dt = 2022080317)]; <p>PushedFilters::  [IsNotNull(userName)]; <p>ReadSchema::  struct<userName:string></body> </html>", equiv="0"];
n144 [label="144: (168) Sort\nSort
long_ipL ASC NULLS FIRST, _gen_alias_258 ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, _gen_alias_2581296 ASC NULLS FIRST], false, 0</body> </html>", equiv="5"];
n145 [label="145: (167) Exchange\nExchange
hashpartitioning(long_ipL, _gen_alias_25 ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, _gen_alias_2581296, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n146 [label="146: (166) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n147 [label="147: (165) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (isnotnull(long_ipL) AND isnotnull(window.end))</body> </html>", equiv="0"];
n148 [label="148: (164) SortAggregate\nSortAggregate", htmltip="<!DOCTYPE html> <html> <body>note: SortAggregate; <p>Keys:  [2]: [long_ipL, window]; <p>Functions:  [6]: [finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, finalmerge_count(merge countL) AS count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, finalmerge_count(merge countL) AS count(if ((gid = 2)) t.`application_id` else null)L, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) collect_set(t.`application_id`) else null) ignore nulls, finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) percentile_approx(t.`timedelta`, 0.5D, 10000)L else null) ignore nullsL, finalmerge_first(merge first, valueSet) AS first(if ((gid = 0)) stddev_samp(CAST(t.`timedelta` AS DOUBLE)) else null) ignore nulls]; <p>Aggregate:  Attributes [6]: [first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, count(if ((gid = 2)) t.`application_id` else null)L, first(if ((gid = 0)) collect_set(t.`application_id`) else null) ignore nulls, first(if ((gid = 0)) percentile_approx(t.`timedelta`, 0.5D, 10000)L else null) ignore nullsL, first(if ((gid = 0)) stddev_samp(CAST(t.`timedelta` AS DOUBLE)) else null) ignore nulls]; <p>Results:  [8]: [long_ipL, window, coalesce(first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, 0) AS cnt_attempts_ip_60mL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L AS cnt_dist_usr_60mL, count(if ((gid = 2)) t.`application_id` else null)L AS cnt_dist_app_60mL, coalesce(first(if ((gid = 0)) collect_set(t.`application_id`) else null) ignore nulls, []) AS app_id_set_60m, first(if ((gid = 0)) percentile_approx(t.`timedelta`, 0.5D, 10000)L else null) ignore nullsL AS 50th_timedelta_60mL, first(if ((gid = 0)) stddev_samp(CAST(t.`timedelta` AS DOUBLE)) else null) ignore nulls AS stddev_timedelta_60m]</body> </html>", equiv="0"];
n149 [label="149: (163) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n150 [label="150: (162) Exchange\nExchange
hashpartitioning(long_ipL, window, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n151 [label="151: (161) SortAggregate\nSortAggregate", htmltip="<!DOCTYPE html> <html> <body>note: SortAggregate; <p>Keys:  [2]: [long_ipL, window]; <p>Functions:  [6]: [partial_first(if ((gid = 0)) count(t.`long_ip`)L else null, true) AS (firstL, valueSet), partial_count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null) AS countL, partial_count(if ((gid = 2)) t.`application_id` else null) AS countL, partial_first(if ((gid = 0)) collect_set(t.`application_id`) else null, true) AS (first, valueSet), partial_first(if ((gid = 0)) percentile_approx(t.`timedelta`, 0.5D, 10000)L else null, true) AS (firstL, valueSet), partial_first(if ((gid = 0)) stddev_samp(CAST(t.`timedelta` AS DOUBLE)) else null, true) AS (first, valueSet)]; <p>Aggregate:  Attributes [10]: [firstL, valueSet, countL, countL, first, valueSet, firstL, valueSet, first, valueSet]; <p>Results:  [12]: [long_ipL, window, firstL, valueSet, countL, countL, first, valueSet, firstL, valueSet, first, valueSet]</body> </html>", equiv="0"];
n152 [label="152: (160) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n153 [label="153: (159) ObjectHashAggregate\nObjectHashAggregate
5", htmltip="<!DOCTYPE html> <html> <body>note: ObjectHashAggregate; <p>Keys:  [5]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [4]: [finalmerge_count(merge countL) AS count(t.`long_ip`L)L, finalmerge_collect_set(merge buf) AS collect_set(t.`application_id`, 0, 0), finalmerge_percentile_approx(merge buf) AS percentile_approx(t.`timedelta`L, 0.5, 10000, 0, 0)L, finalmerge_stddev_samp(merge n, avg, m2) AS stddev_samp(CAST(t.`timedelta` AS DOUBLE))]; <p>Aggregate:  Attributes [4]: [count(t.`long_ip`L)L, collect_set(t.`application_id`, 0, 0), percentile_approx(t.`timedelta`L, 0.5, 10000, 0, 0)L, stddev_samp(CAST(t.`timedelta` AS DOUBLE))]; <p>Results:  [9]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, count(t.`long_ip`L)L AS count(t.`long_ip`)L, collect_set(t.`application_id`, 0, 0) AS collect_set(t.`application_id`), percentile_approx(t.`timedelta`L, 0.5, 10000, 0, 0)L AS percentile_approx(t.`timedelta`, 0.5D, 10000)L, stddev_samp(CAST(t.`timedelta` AS DOUBLE)) AS stddev_samp(CAST(t.`timedelta` AS DOUBLE))]</body> </html>", equiv="0"];
n154 [label="154: (158) Exchange\nExchange
hashpartitioning(long_ipL, window, __aut ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n155 [label="155: (157) ObjectHashAggregate\nObjectHashAggregate
5", htmltip="<!DOCTYPE html> <html> <body>note: ObjectHashAggregate; <p>Keys:  [5]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [4]: [partial_count(t.`long_ip`L) AS countL, partial_collect_set(t.`application_id`, 0, 0) AS buf, partial_percentile_approx(t.`timedelta`L, 0.5, 10000, 0, 0) AS buf, partial_stddev_samp(CAST(t.`timedelta` AS DOUBLE)) AS (n, avg, m2)]; <p>Aggregate:  Attributes [6]: [countL, buf, buf, n, avg, m2]; <p>Results:  [11]: [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, countL, buf, buf, n, avg, m2]</body> </html>", equiv="0"];
n156 [label="156: (156) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [ArrayBuffer(long_ipL, window, null, null, 0, long_ipL, application_id, timedeltaL, cast(timedeltaL as double)), ArrayBuffer(long_ipL, window, username, null, 1, null, null, null, null), ArrayBuffer(long_ipL, window, null, application_id, 2, null, null, null, null)], [long_ipL, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, t.`long_ip`L, t.`application_id`, t.`timedelta`L, CAST(t.`timedelta` AS DOUBLE)]</body> </html>", equiv="6"];
n157 [label="157: (155) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n158 [label="158: (154) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : ((isnotnull(window) AND (transaction_date_time >= window.start)) AND (transaction_date_time < window.end))</body> </html>", equiv="0"];
n159 [label="159: (153) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 12) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 12) * 300000000) + 3600000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, timedeltaL), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 12) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 12) * 300000000) + 3600000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, timedeltaL), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 12) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 12) * 300000000) + 3600000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, timedeltaL), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, T</body> </html>", equiv="7"];
n160 [label="160: (152) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n161 [label="161: (151) SortMergeJoin\nSortMergeJoin LeftOuter
Left: username
Right: un", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [username]; <p>Right:  keys [1]: [un]; <p>Join:  condition: None</body> </html>", equiv="0"];
n162 [label="162: (145) Sort\nSort
username ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [username ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n163 [label="163: (144) Exchange\nExchange
hashpartitioning(username, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(username, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n164 [label="164: (143) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n165 [label="165: (142) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n166 [label="166: (141) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n167 [label="167: (135) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n168 [label="168: (134) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n169 [label="169: (133) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n170 [label="170: (132) BroadcastHashJoin\nBroadcastHashJoin LeftAnti BuildRight
Left: ip_address
Right: ip_address", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastHashJoin; <p>Left:  keys [1]: [ip_address]; <p>Right:  keys [1]: [ip_address]; <p>Join:  condition: None</body> </html>", equiv="0"];
n171 [label="171: (114) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(transaction_date_time)</body> </html>", equiv="8"];
n172 [label="172: (113) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL, application_id, userName, transaction_date_time, timedeltaL], [isnotnull(transaction_date_time)]</body> </html>", equiv="3"];
n173 [label="173: (114) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n174 [label="174: (131) BroadcastExchange\nBroadcastExchange
HashedRelationBroadcastMode(List(input[0 ...", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastExchange; <p>Arguments::  HashedRelationBroadcastMode(List(input[0, string, true]),true), [id=]</body> </html>", equiv="1"];
n175 [label="175: (130) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="2"];
n176 [label="176: (129) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (ip_trans_cntL > 1500)</body> </html>", equiv="0"];
n177 [label="177: (128) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(1)L]; <p>Aggregate:  Attributes [1]: [count(1)L]; <p>Results:  [2]: [ip_address, count(1)L AS ip_trans_cntL]</body> </html>", equiv="0"];
n178 [label="178: (127) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n179 [label="179: (126) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [partial_count(1) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [2]: [ip_address, countL]</body> </html>", equiv="0"];
n180 [label="180: (125) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n181 [label="181: (124) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n182 [label="182: (123) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n183 [label="183: (117) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n184 [label="184: (116) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n185 [label="185: (115) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL]</body> </html>", equiv="3"];
n186 [label="186: (116) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n187 [label="187: (122) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n188 [label="188: (121) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n189 [label="189: (120) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n190 [label="190: (119) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n191 [label="191: (118) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n192 [label="192: (140) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n193 [label="193: (139) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n194 [label="194: (138) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n195 [label="195: (137) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n196 [label="196: (136) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n197 [label="197: (150) Sort\nSort
un ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [un ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n198 [label="198: (149) Exchange\nExchange
hashpartitioning(un, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(un, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n199 [label="199: (148) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n200 [label="200: (147) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(userName)</body> </html>", equiv="0"];
n201 [label="201: (146) Scan\nScan parquet \nitial_data/usr_distip_cnt_map]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/usr_distip_cnt_map]; <p>PartitionFilters::  [isnotnull(data_dt), (data_dt = 2022080317)]; <p>PushedFilters::  [IsNotNull(userName)]; <p>ReadSchema::  struct<userName:string></body> </html>", equiv="0"];
n202 [label="202: (273) Sort\nSort
long_ipL ASC NULLS FIRST, _gen_alias_258 ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, _gen_alias_2581295 ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n203 [label="203: (272) Exchange\nExchange
hashpartitioning(long_ipL, _gen_alias_25 ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, _gen_alias_2581295, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n204 [label="204: (271) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n205 [label="205: (270) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (isnotnull(coalesce(long_ipL, long_ipL)) AND isnotnull(coalesce(window, window).end))</body> </html>", equiv="0"];
n206 [label="206: (269) SortMergeJoin\nSortMergeJoin FullOuter
Left: long_ipL, window
Right: long_ipL, window", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [2]: [long_ipL, window]; <p>Right:  keys [2]: [long_ipL, window]; <p>Join:  condition: None</body> </html>", equiv="0"];
n207 [label="207: (219) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="9"];
n208 [label="208: (218) Exchange\nExchange
hashpartitioning(long_ipL, window, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n209 [label="209: (217) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, finalmerge_count(merge countL) AS count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, finalmerge_count(merge countL) AS count(if ((gid = 2)) t.`application_id` else null)L]; <p>Aggregate:  Attributes [3]: [first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, count(if ((gid = 2)) t.`application_id` else null)L]; <p>Results:  [5]: [long_ipL, window, coalesce(first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, 0) AS attempts_per_ip_5m_statusL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L AS dist_usr_5m_statusL, count(if ((gid = 2)) t.`application_id` else null)L AS dist_app_5m_statusL]</body> </html>", equiv="0"];
n210 [label="210: (216) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n211 [label="211: (215) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [partial_first(if ((gid = 0)) count(t.`long_ip`)L else null, true) AS (firstL, valueSet), partial_count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null) AS countL, partial_count(if ((gid = 2)) t.`application_id` else null) AS countL]; <p>Aggregate:  Attributes [4]: [firstL, valueSet, countL, countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, firstL, valueSet, countL, countL]</body> </html>", equiv="0"];
n212 [label="212: (214) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(t.`long_ip`L)L]; <p>Aggregate:  Attributes [1]: [count(t.`long_ip`L)L]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, count(t.`long_ip`L)L AS count(t.`long_ip`)L]</body> </html>", equiv="0"];
n213 [label="213: (213) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n214 [label="214: (212) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [partial_count(t.`long_ip`L) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, countL]</body> </html>", equiv="0"];
n215 [label="215: (211) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [ArrayBuffer(long_ipL, tguard_status, window, null, null, 0, long_ipL), ArrayBuffer(long_ipL, tguard_status, window, username, null, 1, null), ArrayBuffer(long_ipL, tguard_status, window, null, application_id, 2, null)], [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, t.`long_ip`L]</body> </html>", equiv="7"];
n216 [label="216: (210) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n217 [label="217: (209) SortMergeJoin\nSortMergeJoin LeftOuter
Left: username
Right: un", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [username]; <p>Right:  keys [1]: [un]; <p>Join:  condition: None</body> </html>", equiv="0"];
n218 [label="218: (203) Sort\nSort
username ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [username ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n219 [label="219: (202) Exchange\nExchange
hashpartitioning(username, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(username, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n220 [label="220: (201) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n221 [label="221: (200) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n222 [label="222: (199) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n223 [label="223: (193) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n224 [label="224: (192) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n225 [label="225: (191) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n226 [label="226: (190) BroadcastHashJoin\nBroadcastHashJoin LeftAnti BuildRight
Left: ip_address
Right: ip_address", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastHashJoin; <p>Left:  keys [1]: [ip_address]; <p>Right:  keys [1]: [ip_address]; <p>Join:  condition: None</body> </html>", equiv="0"];
n227 [label="227: (172) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (isnotnull(transaction_date_time) AND (status = FAILED))</body> </html>", equiv="8"];
n228 [label="228: (171) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL, application_id, userName, status, transaction_date_time], [isnotnull(transaction_date_time), (status = FAILED)]</body> </html>", equiv="3"];
n229 [label="229: (172) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n230 [label="230: (189) BroadcastExchange\nBroadcastExchange
HashedRelationBroadcastMode(List(input[0 ...", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastExchange; <p>Arguments::  HashedRelationBroadcastMode(List(input[0, string, true]),true), [id=]</body> </html>", equiv="1"];
n231 [label="231: (188) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="2"];
n232 [label="232: (187) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (ip_trans_cntL > 1500)</body> </html>", equiv="0"];
n233 [label="233: (186) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(1)L]; <p>Aggregate:  Attributes [1]: [count(1)L]; <p>Results:  [2]: [ip_address, count(1)L AS ip_trans_cntL]</body> </html>", equiv="0"];
n234 [label="234: (185) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n235 [label="235: (184) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [partial_count(1) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [2]: [ip_address, countL]</body> </html>", equiv="0"];
n236 [label="236: (183) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n237 [label="237: (182) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n238 [label="238: (181) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n239 [label="239: (175) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n240 [label="240: (174) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n241 [label="241: (173) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL]</body> </html>", equiv="3"];
n242 [label="242: (174) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n243 [label="243: (180) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n244 [label="244: (179) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n245 [label="245: (178) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n246 [label="246: (177) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n247 [label="247: (176) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n248 [label="248: (198) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n249 [label="249: (197) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n250 [label="250: (196) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n251 [label="251: (195) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n252 [label="252: (194) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n253 [label="253: (208) Sort\nSort
un ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [un ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n254 [label="254: (207) Exchange\nExchange
hashpartitioning(un, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(un, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n255 [label="255: (206) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n256 [label="256: (205) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(userName)</body> </html>", equiv="0"];
n257 [label="257: (204) Scan\nScan parquet \nitial_data/usr_distip_cnt_map]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/usr_distip_cnt_map]; <p>PartitionFilters::  [isnotnull(data_dt), (data_dt = 2022080317)]; <p>PushedFilters::  [IsNotNull(userName)]; <p>ReadSchema::  struct<userName:string></body> </html>", equiv="0"];
n258 [label="258: (268) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="9"];
n259 [label="259: (267) Exchange\nExchange
hashpartitioning(long_ipL, window, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n260 [label="260: (266) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, finalmerge_count(merge countL) AS count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, finalmerge_count(merge countL) AS count(if ((gid = 2)) t.`application_id` else null)L]; <p>Aggregate:  Attributes [3]: [first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, count(if ((gid = 2)) t.`application_id` else null)L]; <p>Results:  [5]: [long_ipL, window AS window, coalesce(first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, 0) AS attempts_per_ip_5m_statusL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L AS dist_usr_5m_statusL, count(if ((gid = 2)) t.`application_id` else null)L AS dist_app_5m_statusL]</body> </html>", equiv="0"];
n261 [label="261: (265) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n262 [label="262: (264) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [partial_first(if ((gid = 0)) count(t.`long_ip`)L else null, true) AS (firstL, valueSet), partial_count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null) AS countL, partial_count(if ((gid = 2)) t.`application_id` else null) AS countL]; <p>Aggregate:  Attributes [4]: [firstL, valueSet, countL, countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, firstL, valueSet, countL, countL]</body> </html>", equiv="0"];
n263 [label="263: (263) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(t.`long_ip`L)L]; <p>Aggregate:  Attributes [1]: [count(t.`long_ip`L)L]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, count(t.`long_ip`L)L AS count(t.`long_ip`)L]</body> </html>", equiv="0"];
n264 [label="264: (262) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n265 [label="265: (261) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [partial_count(t.`long_ip`L) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, countL]</body> </html>", equiv="0"];
n266 [label="266: (260) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [ArrayBuffer(long_ipL, tguard_status, window, null, null, 0, long_ipL), ArrayBuffer(long_ipL, tguard_status, window, username, null, 1, null), ArrayBuffer(long_ipL, tguard_status, window, null, application_id, 2, null)], [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, t.`long_ip`L]</body> </html>", equiv="7"];
n267 [label="267: (259) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n268 [label="268: (258) SortMergeJoin\nSortMergeJoin LeftOuter
Left: username
Right: un", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [username]; <p>Right:  keys [1]: [un]; <p>Join:  condition: None</body> </html>", equiv="0"];
n269 [label="269: (252) Sort\nSort
username ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [username ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n270 [label="270: (251) Exchange\nExchange
hashpartitioning(username, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(username, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n271 [label="271: (250) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n272 [label="272: (249) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n273 [label="273: (248) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n274 [label="274: (242) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n275 [label="275: (241) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n276 [label="276: (240) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n277 [label="277: (239) BroadcastHashJoin\nBroadcastHashJoin LeftAnti BuildRight
Left: ip_address
Right: ip_address", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastHashJoin; <p>Left:  keys [1]: [ip_address]; <p>Right:  keys [1]: [ip_address]; <p>Join:  condition: None</body> </html>", equiv="0"];
n278 [label="278: (221) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (isnotnull(transaction_date_time) AND (status = SUCCESS))</body> </html>", equiv="8"];
n279 [label="279: (220) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL, application_id, userName, status, transaction_date_time], [isnotnull(transaction_date_time), (status = SUCCESS)]</body> </html>", equiv="3"];
n280 [label="280: (221) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n281 [label="281: (238) BroadcastExchange\nBroadcastExchange
HashedRelationBroadcastMode(List(input[0 ...", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastExchange; <p>Arguments::  HashedRelationBroadcastMode(List(input[0, string, true]),true), [id=]</body> </html>", equiv="1"];
n282 [label="282: (237) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="2"];
n283 [label="283: (236) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (ip_trans_cntL > 1500)</body> </html>", equiv="0"];
n284 [label="284: (235) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(1)L]; <p>Aggregate:  Attributes [1]: [count(1)L]; <p>Results:  [2]: [ip_address, count(1)L AS ip_trans_cntL]</body> </html>", equiv="0"];
n285 [label="285: (234) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n286 [label="286: (233) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [partial_count(1) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [2]: [ip_address, countL]</body> </html>", equiv="0"];
n287 [label="287: (232) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n288 [label="288: (231) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n289 [label="289: (230) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n290 [label="290: (224) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n291 [label="291: (223) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n292 [label="292: (222) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL]</body> </html>", equiv="3"];
n293 [label="293: (223) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n294 [label="294: (229) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n295 [label="295: (228) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n296 [label="296: (227) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n297 [label="297: (226) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n298 [label="298: (225) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n299 [label="299: (247) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n300 [label="300: (246) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n301 [label="301: (245) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n302 [label="302: (244) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n303 [label="303: (243) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n304 [label="304: (257) Sort\nSort
un ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [un ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n305 [label="305: (256) Exchange\nExchange
hashpartitioning(un, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(un, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n306 [label="306: (255) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n307 [label="307: (254) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(userName)</body> </html>", equiv="0"];
n308 [label="308: (253) Scan\nScan parquet \nitial_data/usr_distip_cnt_map]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/usr_distip_cnt_map]; <p>PartitionFilters::  [isnotnull(data_dt), (data_dt = 2022080317)]; <p>PushedFilters::  [IsNotNull(userName)]; <p>ReadSchema::  struct<userName:string></body> </html>", equiv="0"];
n309 [label="309: (384) Sort\nSort
long_ipL ASC NULLS FIRST, _gen_alias_258 ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, _gen_alias_2581294 ASC NULLS FIRST], false, 0</body> </html>", equiv="10"];
n310 [label="310: (383) Exchange\nExchange
hashpartitioning(long_ipL, _gen_alias_25 ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, _gen_alias_2581294, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n311 [label="311: (382) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n312 [label="312: (381) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (isnotnull(coalesce(long_ipL, long_ipL)) AND isnotnull(coalesce(window, window).end))</body> </html>", equiv="0"];
n313 [label="313: (380) SortMergeJoin\nSortMergeJoin FullOuter
Left: long_ipL, window
Right: long_ipL, window", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [2]: [long_ipL, window]; <p>Right:  keys [2]: [long_ipL, window]; <p>Join:  condition: None</body> </html>", equiv="0"];
n314 [label="314: (327) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="11"];
n315 [label="315: (326) Exchange\nExchange
hashpartitioning(long_ipL, window, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n316 [label="316: (325) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, finalmerge_count(merge countL) AS count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, finalmerge_count(merge countL) AS count(if ((gid = 2)) t.`application_id` else null)L]; <p>Aggregate:  Attributes [3]: [first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, count(if ((gid = 2)) t.`application_id` else null)L]; <p>Results:  [5]: [long_ipL, window, coalesce(first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, 0) AS attempts_per_ip_15m_statusL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L AS dist_usr_15m_statusL, count(if ((gid = 2)) t.`application_id` else null)L AS dist_app_15m_statusL]</body> </html>", equiv="0"];
n317 [label="317: (324) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n318 [label="318: (323) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [partial_first(if ((gid = 0)) count(t.`long_ip`)L else null, true) AS (firstL, valueSet), partial_count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null) AS countL, partial_count(if ((gid = 2)) t.`application_id` else null) AS countL]; <p>Aggregate:  Attributes [4]: [firstL, valueSet, countL, countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, firstL, valueSet, countL, countL]</body> </html>", equiv="0"];
n319 [label="319: (322) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(t.`long_ip`L)L]; <p>Aggregate:  Attributes [1]: [count(t.`long_ip`L)L]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, count(t.`long_ip`L)L AS count(t.`long_ip`)L]</body> </html>", equiv="0"];
n320 [label="320: (321) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n321 [label="321: (320) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [partial_count(t.`long_ip`L) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, countL]</body> </html>", equiv="0"];
n322 [label="322: (319) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [ArrayBuffer(long_ipL, tguard_status, window, null, null, 0, long_ipL), ArrayBuffer(long_ipL, tguard_status, window, username, null, 1, null), ArrayBuffer(long_ipL, tguard_status, window, null, application_id, 2, null)], [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, t.`long_ip`L]</body> </html>", equiv="6"];
n323 [label="323: (318) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n324 [label="324: (317) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : ((isnotnull(window) AND (transaction_date_time >= window.start)) AND (transaction_date_time < window.end))</body> </html>", equiv="0"];
n325 [label="325: (316) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 3) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 3) * 300000000) + 900000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 3) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 3) * 300000000) + 900000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 3) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 3) * 300000000) + 900000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status)], [window, long_ipL, username, application_id, transaction_date_time, tguard_status]</body> </html>", equiv="7"];
n326 [label="326: (315) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n327 [label="327: (314) SortMergeJoin\nSortMergeJoin LeftOuter
Left: username
Right: un", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [username]; <p>Right:  keys [1]: [un]; <p>Join:  condition: None</body> </html>", equiv="0"];
n328 [label="328: (308) Sort\nSort
username ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [username ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n329 [label="329: (307) Exchange\nExchange
hashpartitioning(username, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(username, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n330 [label="330: (306) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n331 [label="331: (305) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n332 [label="332: (304) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n333 [label="333: (298) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n334 [label="334: (297) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n335 [label="335: (296) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n336 [label="336: (295) BroadcastHashJoin\nBroadcastHashJoin LeftAnti BuildRight
Left: ip_address
Right: ip_address", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastHashJoin; <p>Left:  keys [1]: [ip_address]; <p>Right:  keys [1]: [ip_address]; <p>Join:  condition: None</body> </html>", equiv="0"];
n337 [label="337: (277) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : ((status = FAILED) AND isnotnull(transaction_date_time))</body> </html>", equiv="8"];
n338 [label="338: (276) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL, application_id, userName, status, transaction_date_time], [(status = FAILED), isnotnull(transaction_date_time)]</body> </html>", equiv="3"];
n339 [label="339: (277) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n340 [label="340: (294) BroadcastExchange\nBroadcastExchange
HashedRelationBroadcastMode(List(input[0 ...", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastExchange; <p>Arguments::  HashedRelationBroadcastMode(List(input[0, string, true]),true), [id=]</body> </html>", equiv="1"];
n341 [label="341: (293) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="2"];
n342 [label="342: (292) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (ip_trans_cntL > 1500)</body> </html>", equiv="0"];
n343 [label="343: (291) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(1)L]; <p>Aggregate:  Attributes [1]: [count(1)L]; <p>Results:  [2]: [ip_address, count(1)L AS ip_trans_cntL]</body> </html>", equiv="0"];
n344 [label="344: (290) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n345 [label="345: (289) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [partial_count(1) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [2]: [ip_address, countL]</body> </html>", equiv="0"];
n346 [label="346: (288) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n347 [label="347: (287) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n348 [label="348: (286) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n349 [label="349: (280) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n350 [label="350: (279) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n351 [label="351: (278) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL]</body> </html>", equiv="3"];
n352 [label="352: (279) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n353 [label="353: (285) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n354 [label="354: (284) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n355 [label="355: (283) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n356 [label="356: (282) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n357 [label="357: (281) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n358 [label="358: (303) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n359 [label="359: (302) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n360 [label="360: (301) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n361 [label="361: (300) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n362 [label="362: (299) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n363 [label="363: (313) Sort\nSort
un ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [un ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n364 [label="364: (312) Exchange\nExchange
hashpartitioning(un, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(un, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n365 [label="365: (311) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n366 [label="366: (310) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(userName)</body> </html>", equiv="0"];
n367 [label="367: (309) Scan\nScan parquet \nitial_data/usr_distip_cnt_map]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/usr_distip_cnt_map]; <p>PartitionFilters::  [isnotnull(data_dt), (data_dt = 2022080317)]; <p>PushedFilters::  [IsNotNull(userName)]; <p>ReadSchema::  struct<userName:string></body> </html>", equiv="0"];
n368 [label="368: (379) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="11"];
n369 [label="369: (378) Exchange\nExchange
hashpartitioning(long_ipL, window, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n370 [label="370: (377) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, finalmerge_count(merge countL) AS count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, finalmerge_count(merge countL) AS count(if ((gid = 2)) t.`application_id` else null)L]; <p>Aggregate:  Attributes [3]: [first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, count(if ((gid = 2)) t.`application_id` else null)L]; <p>Results:  [5]: [long_ipL, window AS window, coalesce(first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, 0) AS attempts_per_ip_15m_statusL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L AS dist_usr_15m_statusL, count(if ((gid = 2)) t.`application_id` else null)L AS dist_app_15m_statusL]</body> </html>", equiv="0"];
n371 [label="371: (376) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n372 [label="372: (375) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [partial_first(if ((gid = 0)) count(t.`long_ip`)L else null, true) AS (firstL, valueSet), partial_count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null) AS countL, partial_count(if ((gid = 2)) t.`application_id` else null) AS countL]; <p>Aggregate:  Attributes [4]: [firstL, valueSet, countL, countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, firstL, valueSet, countL, countL]</body> </html>", equiv="0"];
n373 [label="373: (374) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(t.`long_ip`L)L]; <p>Aggregate:  Attributes [1]: [count(t.`long_ip`L)L]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, count(t.`long_ip`L)L AS count(t.`long_ip`)L]</body> </html>", equiv="0"];
n374 [label="374: (373) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n375 [label="375: (372) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [partial_count(t.`long_ip`L) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, countL]</body> </html>", equiv="0"];
n376 [label="376: (371) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [ArrayBuffer(long_ipL, tguard_status, window, null, null, 0, long_ipL), ArrayBuffer(long_ipL, tguard_status, window, username, null, 1, null), ArrayBuffer(long_ipL, tguard_status, window, null, application_id, 2, null)], [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, t.`long_ip`L]</body> </html>", equiv="6"];
n377 [label="377: (370) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n378 [label="378: (369) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : ((isnotnull(window) AND (transaction_date_time >= window.start)) AND (transaction_date_time < window.end))</body> </html>", equiv="0"];
n379 [label="379: (368) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 3) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 3) * 300000000) + 900000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 3) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 3) * 300000000) + 900000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 3) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 3) * 300000000) + 900000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status)], [window, long_ipL, username, application_id, transaction_date_time, tguard_status]</body> </html>", equiv="7"];
n380 [label="380: (367) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n381 [label="381: (366) SortMergeJoin\nSortMergeJoin LeftOuter
Left: username
Right: un", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [username]; <p>Right:  keys [1]: [un]; <p>Join:  condition: None</body> </html>", equiv="0"];
n382 [label="382: (360) Sort\nSort
username ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [username ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n383 [label="383: (359) Exchange\nExchange
hashpartitioning(username, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(username, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n384 [label="384: (358) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n385 [label="385: (357) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n386 [label="386: (356) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n387 [label="387: (350) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n388 [label="388: (349) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n389 [label="389: (348) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n390 [label="390: (347) BroadcastHashJoin\nBroadcastHashJoin LeftAnti BuildRight
Left: ip_address
Right: ip_address", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastHashJoin; <p>Left:  keys [1]: [ip_address]; <p>Right:  keys [1]: [ip_address]; <p>Join:  condition: None</body> </html>", equiv="0"];
n391 [label="391: (329) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : ((status = SUCCESS) AND isnotnull(transaction_date_time))</body> </html>", equiv="8"];
n392 [label="392: (328) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL, application_id, userName, status, transaction_date_time], [(status = SUCCESS), isnotnull(transaction_date_time)]</body> </html>", equiv="3"];
n393 [label="393: (329) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n394 [label="394: (346) BroadcastExchange\nBroadcastExchange
HashedRelationBroadcastMode(List(input[0 ...", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastExchange; <p>Arguments::  HashedRelationBroadcastMode(List(input[0, string, true]),true), [id=]</body> </html>", equiv="1"];
n395 [label="395: (345) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="2"];
n396 [label="396: (344) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (ip_trans_cntL > 1500)</body> </html>", equiv="0"];
n397 [label="397: (343) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(1)L]; <p>Aggregate:  Attributes [1]: [count(1)L]; <p>Results:  [2]: [ip_address, count(1)L AS ip_trans_cntL]</body> </html>", equiv="0"];
n398 [label="398: (342) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n399 [label="399: (341) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [partial_count(1) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [2]: [ip_address, countL]</body> </html>", equiv="0"];
n400 [label="400: (340) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n401 [label="401: (339) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n402 [label="402: (338) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n403 [label="403: (332) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n404 [label="404: (331) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n405 [label="405: (330) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL]</body> </html>", equiv="3"];
n406 [label="406: (331) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n407 [label="407: (337) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n408 [label="408: (336) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n409 [label="409: (335) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n410 [label="410: (334) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n411 [label="411: (333) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n412 [label="412: (355) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n413 [label="413: (354) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n414 [label="414: (353) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n415 [label="415: (352) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n416 [label="416: (351) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n417 [label="417: (365) Sort\nSort
un ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [un ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n418 [label="418: (364) Exchange\nExchange
hashpartitioning(un, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(un, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n419 [label="419: (363) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n420 [label="420: (362) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(userName)</body> </html>", equiv="0"];
n421 [label="421: (361) Scan\nScan parquet \nitial_data/usr_distip_cnt_map]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/usr_distip_cnt_map]; <p>PartitionFilters::  [isnotnull(data_dt), (data_dt = 2022080317)]; <p>PushedFilters::  [IsNotNull(userName)]; <p>ReadSchema::  struct<userName:string></body> </html>", equiv="0"];
n422 [label="422: (495) Sort\nSort
long_ipL ASC NULLS FIRST, _gen_alias_258 ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, _gen_alias_2581293 ASC NULLS FIRST], false, 0</body> </html>", equiv="10"];
n423 [label="423: (494) Exchange\nExchange
hashpartitioning(long_ipL, _gen_alias_25 ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, _gen_alias_2581293, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n424 [label="424: (493) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n425 [label="425: (492) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : ((coalesce(window, window).end >= 1669759889000000) AND isnotnull(coalesce(long_ipL, long_ipL)))</body> </html>", equiv="0"];
n426 [label="426: (491) SortMergeJoin\nSortMergeJoin FullOuter
Left: long_ipL, window
Right: long_ipL, window", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [2]: [long_ipL, window]; <p>Right:  keys [2]: [long_ipL, window]; <p>Join:  condition: None</body> </html>", equiv="0"];
n427 [label="427: (438) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="11"];
n428 [label="428: (437) Exchange\nExchange
hashpartitioning(long_ipL, window, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n429 [label="429: (436) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, finalmerge_count(merge countL) AS count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, finalmerge_count(merge countL) AS count(if ((gid = 2)) t.`application_id` else null)L]; <p>Aggregate:  Attributes [3]: [first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, count(if ((gid = 2)) t.`application_id` else null)L]; <p>Results:  [5]: [long_ipL, window, coalesce(first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, 0) AS attempts_per_ip_60m_statusL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L AS dist_usr_60m_statusL, count(if ((gid = 2)) t.`application_id` else null)L AS dist_app_60m_statusL]</body> </html>", equiv="0"];
n430 [label="430: (435) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n431 [label="431: (434) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [partial_first(if ((gid = 0)) count(t.`long_ip`)L else null, true) AS (firstL, valueSet), partial_count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null) AS countL, partial_count(if ((gid = 2)) t.`application_id` else null) AS countL]; <p>Aggregate:  Attributes [4]: [firstL, valueSet, countL, countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, firstL, valueSet, countL, countL]</body> </html>", equiv="0"];
n432 [label="432: (433) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(t.`long_ip`L)L]; <p>Aggregate:  Attributes [1]: [count(t.`long_ip`L)L]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, count(t.`long_ip`L)L AS count(t.`long_ip`)L]</body> </html>", equiv="0"];
n433 [label="433: (432) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n434 [label="434: (431) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [partial_count(t.`long_ip`L) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, countL]</body> </html>", equiv="0"];
n435 [label="435: (430) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [ArrayBuffer(long_ipL, tguard_status, window, null, null, 0, long_ipL), ArrayBuffer(long_ipL, tguard_status, window, username, null, 1, null), ArrayBuffer(long_ipL, tguard_status, window, null, application_id, 2, null)], [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, t.`long_ip`L]</body> </html>", equiv="6"];
n436 [label="436: (429) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n437 [label="437: (428) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : ((isnotnull(window) AND (transaction_date_time >= window.start)) AND (transaction_date_time < window.end))</body> </html>", equiv="0"];
n438 [label="438: (427) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 12) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 12) * 300000000) + 3600000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 12) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 12) * 300000000) + 3600000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 12) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 12) * 300000000) + 3600000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_dat</body> </html>", equiv="7"];
n439 [label="439: (426) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n440 [label="440: (425) SortMergeJoin\nSortMergeJoin LeftOuter
Left: username
Right: un", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [username]; <p>Right:  keys [1]: [un]; <p>Join:  condition: None</body> </html>", equiv="0"];
n441 [label="441: (419) Sort\nSort
username ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [username ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n442 [label="442: (418) Exchange\nExchange
hashpartitioning(username, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(username, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n443 [label="443: (417) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n444 [label="444: (416) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n445 [label="445: (415) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n446 [label="446: (409) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n447 [label="447: (408) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n448 [label="448: (407) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n449 [label="449: (406) BroadcastHashJoin\nBroadcastHashJoin LeftAnti BuildRight
Left: ip_address
Right: ip_address", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastHashJoin; <p>Left:  keys [1]: [ip_address]; <p>Right:  keys [1]: [ip_address]; <p>Join:  condition: None</body> </html>", equiv="0"];
n450 [label="450: (388) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : ((status = FAILED) AND isnotnull(transaction_date_time))</body> </html>", equiv="8"];
n451 [label="451: (387) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL, application_id, userName, status, transaction_date_time], [(status = FAILED), isnotnull(transaction_date_time)]</body> </html>", equiv="3"];
n452 [label="452: (388) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n453 [label="453: (405) BroadcastExchange\nBroadcastExchange
HashedRelationBroadcastMode(List(input[0 ...", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastExchange; <p>Arguments::  HashedRelationBroadcastMode(List(input[0, string, true]),true), [id=]</body> </html>", equiv="1"];
n454 [label="454: (404) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="2"];
n455 [label="455: (403) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (ip_trans_cntL > 1500)</body> </html>", equiv="0"];
n456 [label="456: (402) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(1)L]; <p>Aggregate:  Attributes [1]: [count(1)L]; <p>Results:  [2]: [ip_address, count(1)L AS ip_trans_cntL]</body> </html>", equiv="0"];
n457 [label="457: (401) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n458 [label="458: (400) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [partial_count(1) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [2]: [ip_address, countL]</body> </html>", equiv="0"];
n459 [label="459: (399) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n460 [label="460: (398) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n461 [label="461: (397) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n462 [label="462: (391) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n463 [label="463: (390) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n464 [label="464: (389) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL]</body> </html>", equiv="3"];
n465 [label="465: (390) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n466 [label="466: (396) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n467 [label="467: (395) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n468 [label="468: (394) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n469 [label="469: (393) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n470 [label="470: (392) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n471 [label="471: (414) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n472 [label="472: (413) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n473 [label="473: (412) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n474 [label="474: (411) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n475 [label="475: (410) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n476 [label="476: (424) Sort\nSort
un ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [un ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n477 [label="477: (423) Exchange\nExchange
hashpartitioning(un, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(un, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n478 [label="478: (422) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n479 [label="479: (421) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(userName)</body> </html>", equiv="0"];
n480 [label="480: (420) Scan\nScan parquet \nitial_data/usr_distip_cnt_map]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/usr_distip_cnt_map]; <p>PartitionFilters::  [isnotnull(data_dt), (data_dt = 2022080317)]; <p>PushedFilters::  [IsNotNull(userName)]; <p>ReadSchema::  struct<userName:string></body> </html>", equiv="0"];
n481 [label="481: (490) Sort\nSort
long_ipL ASC NULLS FIRST, window ASC NUL ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, window ASC NULLS FIRST], false, 0</body> </html>", equiv="11"];
n482 [label="482: (489) Exchange\nExchange
hashpartitioning(long_ipL, window, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n483 [label="483: (488) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [finalmerge_first(merge firstL, valueSet) AS first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, finalmerge_count(merge countL) AS count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, finalmerge_count(merge countL) AS count(if ((gid = 2)) t.`application_id` else null)L]; <p>Aggregate:  Attributes [3]: [first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L, count(if ((gid = 2)) t.`application_id` else null)L]; <p>Results:  [5]: [long_ipL, window AS window, coalesce(first(if ((gid = 0)) count(t.`long_ip`)L else null) ignore nullsL, 0) AS attempts_per_ip_60m_statusL, count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null)L AS dist_usr_60m_statusL, count(if ((gid = 2)) t.`application_id` else null)L AS dist_app_60m_statusL]</body> </html>", equiv="0"];
n484 [label="484: (487) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n485 [label="485: (486) HashAggregate\nHashAggregate
3", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [3]: [long_ipL, tguard_status, window]; <p>Functions:  [3]: [partial_first(if ((gid = 0)) count(t.`long_ip`)L else null, true) AS (firstL, valueSet), partial_count(if ((gid = 1)) __auto_generated_subquery_name.`username` else null) AS countL, partial_count(if ((gid = 2)) t.`application_id` else null) AS countL]; <p>Aggregate:  Attributes [4]: [firstL, valueSet, countL, countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, firstL, valueSet, countL, countL]</body> </html>", equiv="0"];
n486 [label="486: (485) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(t.`long_ip`L)L]; <p>Aggregate:  Attributes [1]: [count(t.`long_ip`L)L]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, count(t.`long_ip`L)L AS count(t.`long_ip`)L]</body> </html>", equiv="0"];
n487 [label="487: (484) Exchange\nExchange
hashpartitioning(long_ipL, tguard_status ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n488 [label="488: (483) HashAggregate\nHashAggregate
6", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [6]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid]; <p>Functions:  [1]: [partial_count(t.`long_ip`L) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [7]: [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, countL]</body> </html>", equiv="0"];
n489 [label="489: (482) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [ArrayBuffer(long_ipL, tguard_status, window, null, null, 0, long_ipL), ArrayBuffer(long_ipL, tguard_status, window, username, null, 1, null), ArrayBuffer(long_ipL, tguard_status, window, null, application_id, 2, null)], [long_ipL, tguard_status, window, __auto_generated_subquery_name.`username`, t.`application_id`, gid, t.`long_ip`L]</body> </html>", equiv="6"];
n490 [label="490: (481) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n491 [label="491: (480) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : ((isnotnull(window) AND (transaction_date_time >= window.start)) AND (transaction_date_time < window.end))</body> </html>", equiv="0"];
n492 [label="492: (479) Expand\nExpand", htmltip="<!DOCTYPE html> <html> <body>note: Expand; <p>Arguments::  [List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 12) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 0) - 12) * 300000000) + 3600000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 12) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 1) - 12) * 300000000) + 3600000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 12) * 300000000) + 0), LongType, TimestampType), end, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) as double) = (cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) THEN (CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) + 1) ELSE CEIL((cast((precisetimestampconversion(transaction_date_time, TimestampType, LongType) - 0) as double) / 3.0E8)) END + 2) - 12) * 300000000) + 3600000000), LongType, TimestampType)), long_ipL, username, application_id, transaction_date_time, tguard_status), List(named_struct(start, precisetimestampconversion(((((CASE WHEN (cast(CEIL((cast((precisetimestampconversion(transaction_dat</body> </html>", equiv="7"];
n493 [label="493: (478) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n494 [label="494: (477) SortMergeJoin\nSortMergeJoin LeftOuter
Left: username
Right: un", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [username]; <p>Right:  keys [1]: [un]; <p>Join:  condition: None</body> </html>", equiv="0"];
n495 [label="495: (471) Sort\nSort
username ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [username ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n496 [label="496: (470) Exchange\nExchange
hashpartitioning(username, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(username, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n497 [label="497: (469) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n498 [label="498: (468) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n499 [label="499: (467) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n500 [label="500: (461) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n501 [label="501: (460) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n502 [label="502: (459) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n503 [label="503: (458) BroadcastHashJoin\nBroadcastHashJoin LeftAnti BuildRight
Left: ip_address
Right: ip_address", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastHashJoin; <p>Left:  keys [1]: [ip_address]; <p>Right:  keys [1]: [ip_address]; <p>Join:  condition: None</body> </html>", equiv="0"];
n504 [label="504: (440) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : ((status = SUCCESS) AND isnotnull(transaction_date_time))</body> </html>", equiv="8"];
n505 [label="505: (439) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL, application_id, userName, status, transaction_date_time], [(status = SUCCESS), isnotnull(transaction_date_time)]</body> </html>", equiv="3"];
n506 [label="506: (440) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n507 [label="507: (457) BroadcastExchange\nBroadcastExchange
HashedRelationBroadcastMode(List(input[0 ...", htmltip="<!DOCTYPE html> <html> <body>note: BroadcastExchange; <p>Arguments::  HashedRelationBroadcastMode(List(input[0, string, true]),true), [id=]</body> </html>", equiv="1"];
n508 [label="508: (456) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="2"];
n509 [label="509: (455) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (ip_trans_cntL > 1500)</body> </html>", equiv="0"];
n510 [label="510: (454) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(1)L]; <p>Aggregate:  Attributes [1]: [count(1)L]; <p>Results:  [2]: [ip_address, count(1)L AS ip_trans_cntL]</body> </html>", equiv="0"];
n511 [label="511: (453) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n512 [label="512: (452) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [partial_count(1) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [2]: [ip_address, countL]</body> </html>", equiv="0"];
n513 [label="513: (451) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n514 [label="514: (450) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n515 [label="515: (449) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n516 [label="516: (443) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n517 [label="517: (442) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n518 [label="518: (441) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL]</body> </html>", equiv="3"];
n519 [label="519: (442) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n520 [label="520: (448) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n521 [label="521: (447) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n522 [label="522: (446) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n523 [label="523: (445) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n524 [label="524: (444) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n525 [label="525: (466) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n526 [label="526: (465) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n527 [label="527: (464) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n528 [label="528: (463) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n529 [label="529: (462) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n530 [label="530: (476) Sort\nSort
un ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [un ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n531 [label="531: (475) Exchange\nExchange
hashpartitioning(un, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(un, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n532 [label="532: (474) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n533 [label="533: (473) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(userName)</body> </html>", equiv="0"];
n534 [label="534: (472) Scan\nScan parquet \nitial_data/usr_distip_cnt_map]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/usr_distip_cnt_map]; <p>PartitionFilters::  [isnotnull(data_dt), (data_dt = 2022080317)]; <p>PushedFilters::  [IsNotNull(userName)]; <p>ReadSchema::  struct<userName:string></body> </html>", equiv="0"];
n535 [label="535: (567) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n536 [label="536: (566) SortMergeJoin\nSortMergeJoin FullOuter
Left: long_ipL
Right: long_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [long_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n537 [label="537: (531) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="12"];
n538 [label="538: (530) SortAggregate\nSortAggregate", htmltip="<!DOCTYPE html> <html> <body>note: SortAggregate; <p>Keys:  [3]: [long_ipL, ip_address, status]; <p>Functions:  [4]: [finalmerge_count(merge countL) AS count(1)L, finalmerge_max(merge max) AS max(transaction_date_time), finalmerge_max(merge max) AS max(data_dt), finalmerge_max(merge max) AS max(attsdk_flag)]; <p>Aggregate:  Attributes [4]: [count(1)L, max(transaction_date_time), max(data_dt), max(attsdk_flag)]; <p>Results:  [7]: [count(1)L AS cntL, ip_address, long_ipL, max(transaction_date_time) AS max_transaction_date_time, max(transaction_date_time) AS min_transaction_date_time, max(data_dt) AS tguard_data_dt, max(attsdk_flag) AS attsdk_flag]</body> </html>", equiv="0"];
n539 [label="539: (529) SortAggregate\nSortAggregate", htmltip="<!DOCTYPE html> <html> <body>note: SortAggregate; <p>Keys:  [3]: [long_ipL, ip_address, status]; <p>Functions:  [4]: [partial_count(1) AS countL, partial_max(transaction_date_time) AS max, partial_max(data_dt) AS max, partial_max(attsdk_flag) AS max]; <p>Aggregate:  Attributes [4]: [countL, max, max, max]; <p>Results:  [7]: [long_ipL, ip_address, status, countL, max, max, max]</body> </html>", equiv="0"];
n540 [label="540: (528) Sort\nSort
long_ipL ASC NULLS FIRST, ip_address ASC ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, ip_address ASC NULLS FIRST, status ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n541 [label="541: (527) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n542 [label="542: (526) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n543 [label="543: (525) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n544 [label="544: (519) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n545 [label="545: (518) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n546 [label="546: (517) SortMergeJoin\nSortMergeJoin LeftSemi
Left: ip_address
Right: ip_address", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [ip_address]; <p>Right:  keys [1]: [ip_address]; <p>Join:  condition: None</body> </html>", equiv="0"];
n547 [label="547: (499) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (status = FAILED)</body> </html>", equiv="8"];
n548 [label="548: (498) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL, status, attsdk_flag, transaction_date_time, data_dt], [(status = FAILED)]</body> </html>", equiv="3"];
n549 [label="549: (499) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n550 [label="550: (516) Sort\nSort
ip_address ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [ip_address ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n551 [label="551: (515) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="2"];
n552 [label="552: (514) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (ip_trans_cntL > 1500)</body> </html>", equiv="0"];
n553 [label="553: (513) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(1)L]; <p>Aggregate:  Attributes [1]: [count(1)L]; <p>Results:  [2]: [ip_address, count(1)L AS ip_trans_cntL]</body> </html>", equiv="0"];
n554 [label="554: (512) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n555 [label="555: (511) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [partial_count(1) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [2]: [ip_address, countL]</body> </html>", equiv="0"];
n556 [label="556: (510) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n557 [label="557: (509) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n558 [label="558: (508) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n559 [label="559: (502) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n560 [label="560: (501) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n561 [label="561: (500) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL]</body> </html>", equiv="3"];
n562 [label="562: (501) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n563 [label="563: (507) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n564 [label="564: (506) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n565 [label="565: (505) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n566 [label="566: (504) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n567 [label="567: (503) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n568 [label="568: (524) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n569 [label="569: (523) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n570 [label="570: (522) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n571 [label="571: (521) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n572 [label="572: (520) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n573 [label="573: (565) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="12"];
n574 [label="574: (564) SortAggregate\nSortAggregate", htmltip="<!DOCTYPE html> <html> <body>note: SortAggregate; <p>Keys:  [3]: [long_ipL, ip_address, status]; <p>Functions:  [4]: [finalmerge_count(merge countL) AS count(1)L, finalmerge_max(merge max) AS max(transaction_date_time), finalmerge_max(merge max) AS max(data_dt), finalmerge_max(merge max) AS max(attsdk_flag)]; <p>Aggregate:  Attributes [4]: [count(1)L, max(transaction_date_time), max(data_dt), max(attsdk_flag)]; <p>Results:  [7]: [count(1)L AS cntL, ip_address, long_ipL, max(transaction_date_time) AS max_transaction_date_time, max(transaction_date_time) AS min_transaction_date_time, max(data_dt) AS tguard_data_dt, max(attsdk_flag) AS attsdk_flag]</body> </html>", equiv="0"];
n575 [label="575: (563) SortAggregate\nSortAggregate", htmltip="<!DOCTYPE html> <html> <body>note: SortAggregate; <p>Keys:  [3]: [long_ipL, ip_address, status]; <p>Functions:  [4]: [partial_count(1) AS countL, partial_max(transaction_date_time) AS max, partial_max(data_dt) AS max, partial_max(attsdk_flag) AS max]; <p>Aggregate:  Attributes [4]: [countL, max, max, max]; <p>Results:  [7]: [long_ipL, ip_address, status, countL, max, max, max]</body> </html>", equiv="0"];
n576 [label="576: (562) Sort\nSort
long_ipL ASC NULLS FIRST, ip_address ASC ...", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST, ip_address ASC NULLS FIRST, status ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n577 [label="577: (561) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n578 [label="578: (560) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n579 [label="579: (559) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n580 [label="580: (553) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n581 [label="581: (552) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n582 [label="582: (551) SortMergeJoin\nSortMergeJoin LeftSemi
Left: ip_address
Right: ip_address", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [ip_address]; <p>Right:  keys [1]: [ip_address]; <p>Join:  condition: None</body> </html>", equiv="0"];
n583 [label="583: (533) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (status = SUCCESS)</body> </html>", equiv="8"];
n584 [label="584: (532) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL, status, attsdk_flag, transaction_date_time, data_dt], [(status = SUCCESS)]</body> </html>", equiv="3"];
n585 [label="585: (533) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n586 [label="586: (550) Sort\nSort
ip_address ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [ip_address ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n587 [label="587: (549) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="2"];
n588 [label="588: (548) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : (ip_trans_cntL > 1500)</body> </html>", equiv="0"];
n589 [label="589: (547) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [finalmerge_count(merge countL) AS count(1)L]; <p>Aggregate:  Attributes [1]: [count(1)L]; <p>Results:  [2]: [ip_address, count(1)L AS ip_trans_cntL]</body> </html>", equiv="0"];
n590 [label="590: (546) Exchange\nExchange
hashpartitioning(ip_address, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(ip_address, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n591 [label="591: (545) HashAggregate\nHashAggregate
1", htmltip="<!DOCTYPE html> <html> <body>note: HashAggregate; <p>Keys:  [1]: [ip_address]; <p>Functions:  [1]: [partial_count(1) AS countL]; <p>Aggregate:  Attributes [1]: [countL]; <p>Results:  [2]: [ip_address, countL]</body> </html>", equiv="0"];
n592 [label="592: (544) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n593 [label="593: (543) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnull(ip_whitelist_flg)</body> </html>", equiv="0"];
n594 [label="594: (542) SortMergeJoin\nSortMergeJoin LeftOuter
Left: long_ipL
Right: exploded_ipL", htmltip="<!DOCTYPE html> <html> <body>note: SortMergeJoin; <p>Left:  keys [1]: [long_ipL]; <p>Right:  keys [1]: [exploded_ipL]; <p>Join:  condition: None</body> </html>", equiv="0"];
n595 [label="595: (536) Sort\nSort
long_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [long_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="0"];
n596 [label="596: (535) Exchange\nExchange
hashpartitioning(long_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(long_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n597 [label="597: (534) InMemoryTableScan\nInMemoryTableScan", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryTableScan; <p>Arguments::  [ip_address, long_ipL]</body> </html>", equiv="3"];
n598 [label="598: (535) InMemoryRelation\nInMemoryRelation", htmltip="<!DOCTYPE html> <html> <body>note: InMemoryRelation; <p>Arguments::  [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, timedeltaL], CachedRDDBuilder(org.apache.spark.sql.execution.columnar.DefaultCachedBatchSerializer@4a0cee7,StorageLevel(disk, memory, deserialized, 1 replicas),*(3) Filter (isnotnull(transaction_date_time) AND (transaction_date_time >= 1669756289000000)); <p>+-:  Window [ip_address, long_ipL, application_id, userAgent, userName, status, attsdk_flag, transaction_date_time, data_dt, (unix_timestamp(transaction_date_time, yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false) - unix_timestamp(lag(transaction_date_time, -1, null) windowspecdefinition(ip_address, transaction_date_time ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)), yyyy-MM-dd HH:mm:ss, Some(Etc/UTC), false)) AS timedeltaL], [ip_address], [transaction_date_time ASC NULLS FIRST]; <p>:                         +- FileScan parquet [body_str,data_dt] Batched: true, DataFilters: [isnotnull(body_str), isnotnull(from_json(StructField(sourceIp,StringType,true), body_str..., Format: Parquet, Location: PreparedDeltaFileIndex[abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/haloc_st..., PartitionFilters: [isnotnull(data_dt), (data_dt >= 2022112920)], PushedFilters: [IsNotNull(body_str)], ReadSchema: struct<body_str:string>; <p>,None: )</body> </html>", equiv="0"];
n599 [label="599: (541) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n600 [label="600: (540) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n601 [label="601: (539) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n602 [label="602: (538) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n603 [label="603: (537) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n604 [label="604: (558) Sort\nSort
exploded_ipL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ipL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n605 [label="605: (557) Exchange\nExchange
hashpartitioning(exploded_ipL, 1000", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ipL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n606 [label="606: (556) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n607 [label="607: (555) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ipL)</body> </html>", equiv="0"];
n608 [label="608: (554) Scan\nScan parquet \ninitial_data/whitelist_blowup]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/whitelist_blowup]; <p>PushedFilters::  [IsNotNull(exploded_ip)]; <p>ReadSchema::  struct<exploded_ip:bigint></body> </html>", equiv="0"];
n609 [label="609: (578) Sort\nSort
exploded_ip_iplocL ASC NULLS FIRST", htmltip="<!DOCTYPE html> <html> <body>note: Sort; <p>Arguments::  [exploded_ip_iplocL ASC NULLS FIRST], false, 0</body> </html>", equiv="4"];
n610 [label="610: (577) Exchange\nExchange
hashpartitioning(exploded_ip_iplocL, 100 ...", htmltip="<!DOCTYPE html> <html> <body>note: Exchange; <p>Arguments::  hashpartitioning(exploded_ip_iplocL, 1000), ENSURE_REQUIREMENTS, [id=]</body> </html>", equiv="0"];
n611 [label="611: (576) Project\nProject", htmltip="<!DOCTYPE html> <html> <body>note: Project</body> </html>", equiv="0"];
n612 [label="612: (575) Filter\nFilter", htmltip="<!DOCTYPE html> <html> <body>note: Filter; <p>Condition:  : isnotnull(exploded_ip_iplocL)</body> </html>", equiv="0"];
n613 [label="613: (574) Scan\nScan parquet \netnum_ddos/file_date=20221012]", htmltip="<!DOCTYPE html> <html> <body>note: Scan parquet; <p>Batched::  true; <p>Location::  InMemoryFileIndex [abfss://jailer-gen2-dev@jd1yn19kmtz58fes6xgb.dfs.core.windows.net/initial_data/fathom/iploc_inetnum_ddos/file_date=20221012]; <p>PushedFilters::  [IsNotNull(exploded_ip_iploc)]; <p>ReadSchema::  struct<ip_start_iploc:string,ip_end_iploc:string,country_name_iploc:string,region_iploc:string,city_iploc:string,latitude_iploc:string,longitude_iploc:string,zip_code_iploc:string,time_zone_iploc:string,ISP_or_company_name_iploc:string,domain_name_iploc:string,net_speed_iploc:string,idd_code_iploc:string,area_code_iploc:string,weather_station_code_iploc:string,weather_station_name_iploc:string,mobile_country_codes_iploc:string,mobile_network_code_iploc:string,mobile_brand_iploc:string,elevation_iploc:string,usage_type_iploc:string,exploded_ip_iploc:bigint,dotted_num_ip_iploc:string,country_code_iploc:string,alpha3code:string,country_blk_list_iploc:string,source_inetnum:string,nic_inetnum:string,originas_inetnum:string,netname_inetnum:string,nethandle_inetnum:string,startip_inetnum:string,endip_inetnum:string,bits_inetnum:string,ipversion_inetnum:string,org_inetnum:string,holder_inetnum:string,maintainer_inetnum:string,admincontact_inetnum:string,techcontact_inetnum:string,abusecontact_inetnum:string,parent_inetnum:string,nameserver_inetnum:string,city_inetnum:string,country_code_inetnum:string,rdate_inetnum:string,adate_inetnum:string,status_inetnum:string,mntlower_inetnum:string,mntdomains_inetnum:string,mntroutes_inetnum:string,inetnumup_inetnum:string,rev_inetnum:string,remarks_inetnum:string,exploded_ip_inetnum:bigint,dotted_num_ip_inetnum:string,country_name_inetnum:string,startip_ddos:string,bits_ddos:string,asn_ddos:string,country_code_ddos:string,holder_ddos:string,date_ddos:string,asName_ddos:string,asBlock_ddos:string,asBits_ddos:string,asnClass_ddos:string,source_ddos:string,ipbestguessclass_ddos:string,startip_dotnum_ddos:string,startblock_ip_ddos:string,endblock_ip_ddos:string,startip_num_ddos:string,startblock_num_ddos:bigint,endblock_num_ddos:bigint,exploded_ip_ddos:bigint,country_name_ddos:string></body> </html>", equiv="0"];
n1 -> n2;
n2 -> n3;
n3 -> n4;
n4 -> n5;
n5 -> n6;
n6 -> n7;
n7 -> n8;
n8 -> n9;
n9 -> n10;
n10 -> n11;
n11 -> n12;
n12 -> n13;
n13 -> n14;
n14 -> n15;
n15 -> n16;
n16 -> n17;
n17 -> n18;
n18 -> n19;
n19 -> n20;
n20 -> n21;
n21 -> n22;
n22 -> n23;
n23 -> n24;
n24 -> n25;
n25 -> n26;
n26 -> n27;
n27 -> n28;
n28 -> n29;
n29 -> n30;
n30 -> n31;
n31 -> n32;
n32 -> n33;
n33 -> n34;
n34 -> n35;
n35 -> n36;
n36 -> n37;
n37 -> n38;
n38 -> n39;
n39 -> n40;
n40 -> n41;
n41 -> n42;
n42 -> n43;
n43 -> n44;
n44 -> n45;
n45 -> n46;
n46 -> n47;
n47 -> n48;
n70 -> n48;
n115 -> n48;
n128 -> n48;
n173 -> n48;
n186 -> n48;
n229 -> n48;
n242 -> n48;
n280 -> n48;
n293 -> n48;
n339 -> n48;
n352 -> n48;
n393 -> n48;
n406 -> n48;
n452 -> n48;
n465 -> n48;
n506 -> n48;
n519 -> n48;
n549 -> n48;
n562 -> n48;
n585 -> n48;
n598 -> n48;
n48 -> n49;
n49 -> n50;
n50 -> n51;
n51 -> n52;
n52 -> n53;
n53 -> n54;
n54 -> n55;
n55 -> n56;
n56 -> n57;
n45 -> n58;
n58 -> n59;
n59 -> n60;
n60 -> n61;
n61 -> n62;
n62 -> n63;
n63 -> n64;
n64 -> n65;
n65 -> n66;
n66 -> n67;
n67 -> n68;
n68 -> n69;
n69 -> n70;
n66 -> n71;
n71 -> n72;
n72 -> n73;
n73 -> n74;
n74 -> n75;
n42 -> n76;
n76 -> n77;
n77 -> n78;
n78 -> n79;
n79 -> n80;
n33 -> n81;
n81 -> n82;
n82 -> n83;
n83 -> n84;
n84 -> n85;
n19 -> n86;
n86 -> n87;
n87 -> n88;
n88 -> n89;
n89 -> n90;
n90 -> n91;
n91 -> n92;
n92 -> n93;
n93 -> n94;
n94 -> n95;
n95 -> n96;
n96 -> n97;
n97 -> n98;
n98 -> n99;
n99 -> n100;
n100 -> n101;
n101 -> n102;
n102 -> n103;
n103 -> n104;
n104 -> n105;
n105 -> n106;
n106 -> n107;
n107 -> n108;
n108 -> n109;
n109 -> n110;
n110 -> n111;
n111 -> n112;
n112 -> n113;
n113 -> n114;
n114 -> n115;
n112 -> n116;
n116 -> n117;
n117 -> n118;
n118 -> n119;
n119 -> n120;
n120 -> n121;
n121 -> n122;
n122 -> n123;
n123 -> n124;
n124 -> n125;
n125 -> n126;
n126 -> n127;
n127 -> n128;
n124 -> n129;
n129 -> n130;
n130 -> n131;
n131 -> n132;
n132 -> n133;
n108 -> n134;
n134 -> n135;
n135 -> n136;
n136 -> n137;
n137 -> n138;
n103 -> n139;
n139 -> n140;
n140 -> n141;
n141 -> n142;
n142 -> n143;
n17 -> n144;
n144 -> n145;
n145 -> n146;
n146 -> n147;
n147 -> n148;
n148 -> n149;
n149 -> n150;
n150 -> n151;
n151 -> n152;
n152 -> n153;
n153 -> n154;
n154 -> n155;
n155 -> n156;
n156 -> n157;
n157 -> n158;
n158 -> n159;
n159 -> n160;
n160 -> n161;
n161 -> n162;
n162 -> n163;
n163 -> n164;
n164 -> n165;
n165 -> n166;
n166 -> n167;
n167 -> n168;
n168 -> n169;
n169 -> n170;
n170 -> n171;
n171 -> n172;
n172 -> n173;
n170 -> n174;
n174 -> n175;
n175 -> n176;
n176 -> n177;
n177 -> n178;
n178 -> n179;
n179 -> n180;
n180 -> n181;
n181 -> n182;
n182 -> n183;
n183 -> n184;
n184 -> n185;
n185 -> n186;
n182 -> n187;
n187 -> n188;
n188 -> n189;
n189 -> n190;
n190 -> n191;
n166 -> n192;
n192 -> n193;
n193 -> n194;
n194 -> n195;
n195 -> n196;
n161 -> n197;
n197 -> n198;
n198 -> n199;
n199 -> n200;
n200 -> n201;
n15 -> n202;
n202 -> n203;
n203 -> n204;
n204 -> n205;
n205 -> n206;
n206 -> n207;
n207 -> n208;
n208 -> n209;
n209 -> n210;
n210 -> n211;
n211 -> n212;
n212 -> n213;
n213 -> n214;
n214 -> n215;
n215 -> n216;
n216 -> n217;
n217 -> n218;
n218 -> n219;
n219 -> n220;
n220 -> n221;
n221 -> n222;
n222 -> n223;
n223 -> n224;
n224 -> n225;
n225 -> n226;
n226 -> n227;
n227 -> n228;
n228 -> n229;
n226 -> n230;
n230 -> n231;
n231 -> n232;
n232 -> n233;
n233 -> n234;
n234 -> n235;
n235 -> n236;
n236 -> n237;
n237 -> n238;
n238 -> n239;
n239 -> n240;
n240 -> n241;
n241 -> n242;
n238 -> n243;
n243 -> n244;
n244 -> n245;
n245 -> n246;
n246 -> n247;
n222 -> n248;
n248 -> n249;
n249 -> n250;
n250 -> n251;
n251 -> n252;
n217 -> n253;
n253 -> n254;
n254 -> n255;
n255 -> n256;
n256 -> n257;
n206 -> n258;
n258 -> n259;
n259 -> n260;
n260 -> n261;
n261 -> n262;
n262 -> n263;
n263 -> n264;
n264 -> n265;
n265 -> n266;
n266 -> n267;
n267 -> n268;
n268 -> n269;
n269 -> n270;
n270 -> n271;
n271 -> n272;
n272 -> n273;
n273 -> n274;
n274 -> n275;
n275 -> n276;
n276 -> n277;
n277 -> n278;
n278 -> n279;
n279 -> n280;
n277 -> n281;
n281 -> n282;
n282 -> n283;
n283 -> n284;
n284 -> n285;
n285 -> n286;
n286 -> n287;
n287 -> n288;
n288 -> n289;
n289 -> n290;
n290 -> n291;
n291 -> n292;
n292 -> n293;
n289 -> n294;
n294 -> n295;
n295 -> n296;
n296 -> n297;
n297 -> n298;
n273 -> n299;
n299 -> n300;
n300 -> n301;
n301 -> n302;
n302 -> n303;
n268 -> n304;
n304 -> n305;
n305 -> n306;
n306 -> n307;
n307 -> n308;
n13 -> n309;
n309 -> n310;
n310 -> n311;
n311 -> n312;
n312 -> n313;
n313 -> n314;
n314 -> n315;
n315 -> n316;
n316 -> n317;
n317 -> n318;
n318 -> n319;
n319 -> n320;
n320 -> n321;
n321 -> n322;
n322 -> n323;
n323 -> n324;
n324 -> n325;
n325 -> n326;
n326 -> n327;
n327 -> n328;
n328 -> n329;
n329 -> n330;
n330 -> n331;
n331 -> n332;
n332 -> n333;
n333 -> n334;
n334 -> n335;
n335 -> n336;
n336 -> n337;
n337 -> n338;
n338 -> n339;
n336 -> n340;
n340 -> n341;
n341 -> n342;
n342 -> n343;
n343 -> n344;
n344 -> n345;
n345 -> n346;
n346 -> n347;
n347 -> n348;
n348 -> n349;
n349 -> n350;
n350 -> n351;
n351 -> n352;
n348 -> n353;
n353 -> n354;
n354 -> n355;
n355 -> n356;
n356 -> n357;
n332 -> n358;
n358 -> n359;
n359 -> n360;
n360 -> n361;
n361 -> n362;
n327 -> n363;
n363 -> n364;
n364 -> n365;
n365 -> n366;
n366 -> n367;
n313 -> n368;
n368 -> n369;
n369 -> n370;
n370 -> n371;
n371 -> n372;
n372 -> n373;
n373 -> n374;
n374 -> n375;
n375 -> n376;
n376 -> n377;
n377 -> n378;
n378 -> n379;
n379 -> n380;
n380 -> n381;
n381 -> n382;
n382 -> n383;
n383 -> n384;
n384 -> n385;
n385 -> n386;
n386 -> n387;
n387 -> n388;
n388 -> n389;
n389 -> n390;
n390 -> n391;
n391 -> n392;
n392 -> n393;
n390 -> n394;
n394 -> n395;
n395 -> n396;
n396 -> n397;
n397 -> n398;
n398 -> n399;
n399 -> n400;
n400 -> n401;
n401 -> n402;
n402 -> n403;
n403 -> n404;
n404 -> n405;
n405 -> n406;
n402 -> n407;
n407 -> n408;
n408 -> n409;
n409 -> n410;
n410 -> n411;
n386 -> n412;
n412 -> n413;
n413 -> n414;
n414 -> n415;
n415 -> n416;
n381 -> n417;
n417 -> n418;
n418 -> n419;
n419 -> n420;
n420 -> n421;
n11 -> n422;
n422 -> n423;
n423 -> n424;
n424 -> n425;
n425 -> n426;
n426 -> n427;
n427 -> n428;
n428 -> n429;
n429 -> n430;
n430 -> n431;
n431 -> n432;
n432 -> n433;
n433 -> n434;
n434 -> n435;
n435 -> n436;
n436 -> n437;
n437 -> n438;
n438 -> n439;
n439 -> n440;
n440 -> n441;
n441 -> n442;
n442 -> n443;
n443 -> n444;
n444 -> n445;
n445 -> n446;
n446 -> n447;
n447 -> n448;
n448 -> n449;
n449 -> n450;
n450 -> n451;
n451 -> n452;
n449 -> n453;
n453 -> n454;
n454 -> n455;
n455 -> n456;
n456 -> n457;
n457 -> n458;
n458 -> n459;
n459 -> n460;
n460 -> n461;
n461 -> n462;
n462 -> n463;
n463 -> n464;
n464 -> n465;
n461 -> n466;
n466 -> n467;
n467 -> n468;
n468 -> n469;
n469 -> n470;
n445 -> n471;
n471 -> n472;
n472 -> n473;
n473 -> n474;
n474 -> n475;
n440 -> n476;
n476 -> n477;
n477 -> n478;
n478 -> n479;
n479 -> n480;
n426 -> n481;
n481 -> n482;
n482 -> n483;
n483 -> n484;
n484 -> n485;
n485 -> n486;
n486 -> n487;
n487 -> n488;
n488 -> n489;
n489 -> n490;
n490 -> n491;
n491 -> n492;
n492 -> n493;
n493 -> n494;
n494 -> n495;
n495 -> n496;
n496 -> n497;
n497 -> n498;
n498 -> n499;
n499 -> n500;
n500 -> n501;
n501 -> n502;
n502 -> n503;
n503 -> n504;
n504 -> n505;
n505 -> n506;
n503 -> n507;
n507 -> n508;
n508 -> n509;
n509 -> n510;
n510 -> n511;
n511 -> n512;
n512 -> n513;
n513 -> n514;
n514 -> n515;
n515 -> n516;
n516 -> n517;
n517 -> n518;
n518 -> n519;
n515 -> n520;
n520 -> n521;
n521 -> n522;
n522 -> n523;
n523 -> n524;
n499 -> n525;
n525 -> n526;
n526 -> n527;
n527 -> n528;
n528 -> n529;
n494 -> n530;
n530 -> n531;
n531 -> n532;
n532 -> n533;
n533 -> n534;
n9 -> n535;
n535 -> n536;
n536 -> n537;
n537 -> n538;
n538 -> n539;
n539 -> n540;
n540 -> n541;
n541 -> n542;
n542 -> n543;
n543 -> n544;
n544 -> n545;
n545 -> n546;
n546 -> n547;
n547 -> n548;
n548 -> n549;
n546 -> n550;
n550 -> n551;
n551 -> n552;
n552 -> n553;
n553 -> n554;
n554 -> n555;
n555 -> n556;
n556 -> n557;
n557 -> n558;
n558 -> n559;
n559 -> n560;
n560 -> n561;
n561 -> n562;
n558 -> n563;
n563 -> n564;
n564 -> n565;
n565 -> n566;
n566 -> n567;
n543 -> n568;
n568 -> n569;
n569 -> n570;
n570 -> n571;
n571 -> n572;
n536 -> n573;
n573 -> n574;
n574 -> n575;
n575 -> n576;
n576 -> n577;
n577 -> n578;
n578 -> n579;
n579 -> n580;
n580 -> n581;
n581 -> n582;
n582 -> n583;
n583 -> n584;
n584 -> n585;
n582 -> n586;
n586 -> n587;
n587 -> n588;
n588 -> n589;
n589 -> n590;
n590 -> n591;
n591 -> n592;
n592 -> n593;
n593 -> n594;
n594 -> n595;
n595 -> n596;
n596 -> n597;
n597 -> n598;
n594 -> n599;
n599 -> n600;
n600 -> n601;
n601 -> n602;
n602 -> n603;
n579 -> n604;
n604 -> n605;
n605 -> n606;
n606 -> n607;
n607 -> n608;
n3 -> n609;
n609 -> n610;
n610 -> n611;
n611 -> n612;
n612 -> n613;
}
